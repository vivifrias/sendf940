
SENdf940.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000458c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004808  08004808  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  0800486c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800486c  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c035  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf5  00000000  00000000  0002c102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000738  00000000  00000000  0002e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276f3  00000000  00000000  0002eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb33  00000000  00000000  00056493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000facfa  00000000  00000000  00062fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ae0  00000000  00000000  0015dcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001607a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004774 	.word	0x08004774

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004774 	.word	0x08004774

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fbca 	bl	8000d8a <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005f6:	f000 fa09 	bl	8000a0c <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f883 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f9bd 	bl	800097c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000602:	f000 f8df 	bl	80007c4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f989 	bl	800091c <MX_USART3_UART_Init>
  MX_RTC_Init();
 800060a:	f000 f92d 	bl	8000868 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  sTime.Hours = 0x01;
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <main+0xf8>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x30;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <main+0xf8>)
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <main+0xf8>)
 800061c:	2200      	movs	r2, #0
 800061e:	709a      	strb	r2, [r3, #2]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000620:	2201      	movs	r2, #1
 8000622:	4930      	ldr	r1, [pc, #192]	; (80006e4 <main+0xf8>)
 8000624:	4830      	ldr	r0, [pc, #192]	; (80006e8 <main+0xfc>)
 8000626:	f002 fc89 	bl	8002f3c <HAL_RTC_SetTime>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x48>
   {
 	  Error_Handler();
 8000630:	f000 fa18 	bl	8000a64 <Error_Handler>

  while (1)
  {


	    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000634:	2200      	movs	r2, #0
 8000636:	492d      	ldr	r1, [pc, #180]	; (80006ec <main+0x100>)
 8000638:	482b      	ldr	r0, [pc, #172]	; (80006e8 <main+0xfc>)
 800063a:	f002 fdfb 	bl	8003234 <HAL_RTC_GetDate>
	    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800063e:	2200      	movs	r2, #0
 8000640:	4928      	ldr	r1, [pc, #160]	; (80006e4 <main+0xf8>)
 8000642:	4829      	ldr	r0, [pc, #164]	; (80006e8 <main+0xfc>)
 8000644:	f002 fd14 	bl	8003070 <HAL_RTC_GetTime>
	    sprintf(timestamp, "%02d-%02d-%02d %02d.%02d.%02d\r\n",
	            sDate.Year, sDate.Month, sDate.Date,
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <main+0x100>)
 800064a:	78db      	ldrb	r3, [r3, #3]
	    sprintf(timestamp, "%02d-%02d-%02d %02d.%02d.%02d\r\n",
 800064c:	461c      	mov	r4, r3
	            sDate.Year, sDate.Month, sDate.Date,
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <main+0x100>)
 8000650:	785b      	ldrb	r3, [r3, #1]
	    sprintf(timestamp, "%02d-%02d-%02d %02d.%02d.%02d\r\n",
 8000652:	461d      	mov	r5, r3
	            sDate.Year, sDate.Month, sDate.Date,
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <main+0x100>)
 8000656:	789b      	ldrb	r3, [r3, #2]
	    sprintf(timestamp, "%02d-%02d-%02d %02d.%02d.%02d\r\n",
 8000658:	461a      	mov	r2, r3
	            sTime.Hours, sTime.Minutes, sTime.Seconds);
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <main+0xf8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
	    sprintf(timestamp, "%02d-%02d-%02d %02d.%02d.%02d\r\n",
 800065e:	4619      	mov	r1, r3
	            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <main+0xf8>)
 8000662:	785b      	ldrb	r3, [r3, #1]
	    sprintf(timestamp, "%02d-%02d-%02d %02d.%02d.%02d\r\n",
 8000664:	4618      	mov	r0, r3
	            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <main+0xf8>)
 8000668:	789b      	ldrb	r3, [r3, #2]
	    sprintf(timestamp, "%02d-%02d-%02d %02d.%02d.%02d\r\n",
 800066a:	9303      	str	r3, [sp, #12]
 800066c:	9002      	str	r0, [sp, #8]
 800066e:	9101      	str	r1, [sp, #4]
 8000670:	9200      	str	r2, [sp, #0]
 8000672:	462b      	mov	r3, r5
 8000674:	4622      	mov	r2, r4
 8000676:	491e      	ldr	r1, [pc, #120]	; (80006f0 <main+0x104>)
 8000678:	481e      	ldr	r0, [pc, #120]	; (80006f4 <main+0x108>)
 800067a:	f003 fbd7 	bl	8003e2c <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t *)&timestamp, strlen(timestamp), 1000);
 800067e:	481d      	ldr	r0, [pc, #116]	; (80006f4 <main+0x108>)
 8000680:	f7ff fdde 	bl	8000240 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068c:	4919      	ldr	r1, [pc, #100]	; (80006f4 <main+0x108>)
 800068e:	481a      	ldr	r0, [pc, #104]	; (80006f8 <main+0x10c>)
 8000690:	f002 ff2e 	bl	80034f0 <HAL_UART_Transmit>
	    HAL_Delay(2000);
 8000694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000698:	f000 fbd4 	bl	8000e44 <HAL_Delay>


	    HAL_ADC_Start(&hadc1);
 800069c:	4817      	ldr	r0, [pc, #92]	; (80006fc <main+0x110>)
 800069e:	f000 fc39 	bl	8000f14 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); //consulta
 80006a2:	f04f 31ff 	mov.w	r1, #4294967295
 80006a6:	4815      	ldr	r0, [pc, #84]	; (80006fc <main+0x110>)
 80006a8:	f000 fd02 	bl	80010b0 <HAL_ADC_PollForConversion>
	    raw = HAL_ADC_GetValue(&hadc1); //guarda en memoria
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <main+0x110>)
 80006ae:	f000 fd8a 	bl	80011c6 <HAL_ADC_GetValue>
 80006b2:	60f8      	str	r0, [r7, #12]
	    sprintf(msg, "%lu\r\n", (unsigned long)raw); //crear la cadena
 80006b4:	463b      	mov	r3, r7
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4911      	ldr	r1, [pc, #68]	; (8000700 <main+0x114>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fbb6 	bl	8003e2c <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80006c0:	463b      	mov	r3, r7
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fdbc 	bl	8000240 <strlen>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4639      	mov	r1, r7
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <main+0x10c>)
 80006d4:	f002 ff0c 	bl	80034f0 <HAL_UART_Transmit>
	    HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f000 fbb2 	bl	8000e44 <HAL_Delay>
  {
 80006e0:	e7a8      	b.n	8000634 <main+0x48>
 80006e2:	bf00      	nop
 80006e4:	20000090 	.word	0x20000090
 80006e8:	200000f0 	.word	0x200000f0
 80006ec:	200000a4 	.word	0x200000a4
 80006f0:	0800478c 	.word	0x0800478c
 80006f4:	20000078 	.word	0x20000078
 80006f8:	20000110 	.word	0x20000110
 80006fc:	200000a8 	.word	0x200000a8
 8000700:	080047ac 	.word	0x080047ac

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fbaa 	bl	8003e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000728:	f001 fab8 	bl	8001c9c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xb8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <SystemClock_Config+0xb8>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <SystemClock_Config+0xb8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <SystemClock_Config+0xbc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <SystemClock_Config+0xbc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <SystemClock_Config+0xbc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000760:	230a      	movs	r3, #10
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000770:	2300      	movs	r3, #0
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fa9f 	bl	8001cbc <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000784:	f000 f96e 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fd38 	bl	8002218 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ae:	f000 f959 	bl	8000a64 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_ADC1_Init+0x98>)
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_ADC1_Init+0x98>)
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_ADC1_Init+0xa0>)
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_ADC1_Init+0x98>)
 8000810:	2201      	movs	r2, #1
 8000812:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ADC1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_ADC1_Init+0x98>)
 800081e:	2201      	movs	r2, #1
 8000820:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <MX_ADC1_Init+0x98>)
 8000824:	f000 fb32 	bl	8000e8c <HAL_ADC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f919 	bl	8000a64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000832:	2309      	movs	r3, #9
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2301      	movs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_ADC1_Init+0x98>)
 8000844:	f000 fccc 	bl	80011e0 <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800084e:	f000 f909 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000a8 	.word	0x200000a8
 8000860:	40012000 	.word	0x40012000
 8000864:	0f000001 	.word	0x0f000001

08000868 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_RTC_Init+0xac>)
 8000882:	4a25      	ldr	r2, [pc, #148]	; (8000918 <MX_RTC_Init+0xb0>)
 8000884:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_RTC_Init+0xac>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_RTC_Init+0xac>)
 800088e:	227f      	movs	r2, #127	; 0x7f
 8000890:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_RTC_Init+0xac>)
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_RTC_Init+0xac>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_RTC_Init+0xac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_RTC_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008aa:	481a      	ldr	r0, [pc, #104]	; (8000914 <MX_RTC_Init+0xac>)
 80008ac:	f002 fac2 	bl	8002e34 <HAL_RTC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f8d5 	bl	8000a64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80008be:	2300      	movs	r3, #0
 80008c0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <MX_RTC_Init+0xac>)
 80008d6:	f002 fb31 	bl	8002f3c <HAL_RTC_SetTime>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f8c0 	bl	8000a64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008e4:	2301      	movs	r3, #1
 80008e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 80008e8:	2310      	movs	r3, #16
 80008ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x23;
 80008ec:	2323      	movs	r3, #35	; 0x23
 80008ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80008f0:	2323      	movs	r3, #35	; 0x23
 80008f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_RTC_Init+0xac>)
 80008fc:	f002 fc16 	bl	800312c <HAL_RTC_SetDate>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000906:	f000 f8ad 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000f0 	.word	0x200000f0
 8000918:	40002800 	.word	0x40002800

0800091c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <MX_USART3_UART_Init+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART3_UART_Init+0x58>)
 8000960:	f002 fd78 	bl	8003454 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f87b 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000110 	.word	0x20000110
 8000978:	40004800 	.word	0x40004800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_GPIO_Init+0x8c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MX_GPIO_Init+0x8c>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x8c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x8c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_GPIO_Init+0x8c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	371c      	adds	r7, #28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a1e:	f000 ff15 	bl	800184c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a2e:	231f      	movs	r3, #31
 8000a30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a32:	2387      	movs	r3, #135	; 0x87
 8000a34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a42:	2301      	movs	r3, #1
 8000a44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 ff33 	bl	80018bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a56:	2004      	movs	r0, #4
 8000a58:	f000 ff10 	bl	800187c <HAL_MPU_Enable>

}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <HAL_ADC_MspInit+0x74>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d123      	bne.n	8000b22 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_ADC_MspInit+0x78>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_ADC_MspInit+0x78>)
 8000ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_ADC_MspInit+0x78>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_ADC_MspInit+0x78>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_ADC_MspInit+0x78>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_ADC_MspInit+0x78>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_ADC_MspInit+0x7c>)
 8000b1e:	f000 ff11 	bl	8001944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400

08000b38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0a6      	sub	sp, #152	; 0x98
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2290      	movs	r2, #144	; 0x90
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 f98f 	bl	8003e6c <memset>
  if(hrtc->Instance==RTC)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_RTC_MspInit+0x54>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d114      	bne.n	8000b82 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b58:	2320      	movs	r3, #32
 8000b5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fd3c 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b72:	f7ff ff77 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_RTC_MspInit+0x58>)
 8000b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <HAL_RTC_MspInit+0x58>)
 8000b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b80:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3798      	adds	r7, #152	; 0x98
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40002800 	.word	0x40002800
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ae      	sub	sp, #184	; 0xb8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2290      	movs	r2, #144	; 0x90
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 f959 	bl	8003e6c <memset>
  if(huart->Instance==USART3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <HAL_UART_MspInit+0xb4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13c      	bne.n	8000c3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fd06 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bde:	f7ff ff41 	bl	8000a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_UART_MspInit+0xb8>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <HAL_UART_MspInit+0xb8>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0xb8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_UART_MspInit+0xb8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <HAL_UART_MspInit+0xb8>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_UART_MspInit+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_UART_MspInit+0xbc>)
 8000c3a:	f000 fe83 	bl	8001944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	37b8      	adds	r7, #184	; 0xb8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f8b0 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f003 f8d0 	bl	8003e7c <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20080000 	.word	0x20080000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000198 	.word	0x20000198
 8000d10:	200002e8 	.word	0x200002e8

08000d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f003 f88f 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc3f 	bl	80005ec <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d7c:	08004810 	.word	0x08004810
  ldr r2, =_sbss
 8000d80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d84:	200002e8 	.word	0x200002e8

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>

08000d8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f000 fd28 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d94:	200f      	movs	r0, #15
 8000d96:	f000 f805 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9a:	f7ff fe69 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fd35 	bl	8001832 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 fd0b 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	2000019c 	.word	0x2000019c

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000019c 	.word	0x2000019c

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e031      	b.n	8000f06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d109      	bne.n	8000ebe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fe04 	bl	8000ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_ADC_Init+0x84>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	f043 0202 	orr.w	r2, r3, #2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fad6 	bl	800148c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef6:	e001      	b.n	8000efc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	ffffeefd 	.word	0xffffeefd

08000f14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Start+0x1a>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e0ad      	b.n	800108a <HAL_ADC_Start+0x176>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d018      	beq.n	8000f76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f54:	4b50      	ldr	r3, [pc, #320]	; (8001098 <HAL_ADC_Start+0x184>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a50      	ldr	r2, [pc, #320]	; (800109c <HAL_ADC_Start+0x188>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0c9a      	lsrs	r2, r3, #18
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d175      	bne.n	8001070 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f88:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <HAL_ADC_Start+0x18c>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000faa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fbe:	d106      	bne.n	8000fce <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	f023 0206 	bic.w	r2, r3, #6
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	645a      	str	r2, [r3, #68]	; 0x44
 8000fcc:	e002      	b.n	8000fd4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_ADC_Start+0x190>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10f      	bne.n	8001012 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d143      	bne.n	8001088 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	e03a      	b.n	8001088 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <HAL_ADC_Start+0x194>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d10e      	bne.n	800103a <HAL_ADC_Start+0x126>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d107      	bne.n	800103a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001038:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_ADC_Start+0x190>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	d120      	bne.n	8001088 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_ADC_Start+0x198>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d11b      	bne.n	8001088 <HAL_ADC_Start+0x174>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d114      	bne.n	8001088 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	e00b      	b.n	8001088 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f043 0210 	orr.w	r2, r3, #16
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	f043 0201 	orr.w	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000
 800109c:	431bde83 	.word	0x431bde83
 80010a0:	fffff8fe 	.word	0xfffff8fe
 80010a4:	40012300 	.word	0x40012300
 80010a8:	40012000 	.word	0x40012000
 80010ac:	40012200 	.word	0x40012200

080010b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010cc:	d113      	bne.n	80010f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010dc:	d10b      	bne.n	80010f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f043 0220 	orr.w	r2, r3, #32
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e063      	b.n	80011be <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010f6:	f7ff fe99 	bl	8000e2c <HAL_GetTick>
 80010fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010fc:	e021      	b.n	8001142 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d01d      	beq.n	8001142 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <HAL_ADC_PollForConversion+0x6c>
 800110c:	f7ff fe8e 	bl	8000e2c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d212      	bcs.n	8001142 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b02      	cmp	r3, #2
 8001128:	d00b      	beq.n	8001142 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f043 0204 	orr.w	r2, r3, #4
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e03d      	b.n	80011be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b02      	cmp	r3, #2
 800114e:	d1d6      	bne.n	80010fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f06f 0212 	mvn.w	r2, #18
 8001158:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d123      	bne.n	80011bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001178:	2b00      	cmp	r3, #0
 800117a:	d11f      	bne.n	80011bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001194:	2b00      	cmp	r3, #0
 8001196:	d111      	bne.n	80011bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1c>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e136      	b.n	800146a <HAL_ADC_ConfigChannel+0x28a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d93a      	bls.n	8001282 <HAL_ADC_ConfigChannel+0xa2>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001214:	d035      	beq.n	8001282 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	3b1e      	subs	r3, #30
 800122c:	2207      	movs	r2, #7
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a8d      	ldr	r2, [pc, #564]	; (8001478 <HAL_ADC_ConfigChannel+0x298>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10a      	bne.n	800125c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	061a      	lsls	r2, r3, #24
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800125a:	e035      	b.n	80012c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68d9      	ldr	r1, [r3, #12]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	4603      	mov	r3, r0
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4403      	add	r3, r0
 8001274:	3b1e      	subs	r3, #30
 8001276:	409a      	lsls	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001280:	e022      	b.n	80012c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6919      	ldr	r1, [r3, #16]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43da      	mvns	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	400a      	ands	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6919      	ldr	r1, [r3, #16]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4403      	add	r3, r0
 80012be:	409a      	lsls	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b06      	cmp	r3, #6
 80012ce:	d824      	bhi.n	800131a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b05      	subs	r3, #5
 80012e2:	221f      	movs	r2, #31
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43da      	mvns	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	400a      	ands	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b05      	subs	r3, #5
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
 8001318:	e04c      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b0c      	cmp	r3, #12
 8001320:	d824      	bhi.n	800136c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3b23      	subs	r3, #35	; 0x23
 8001334:	221f      	movs	r2, #31
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	400a      	ands	r2, r1
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	3b23      	subs	r3, #35	; 0x23
 800135e:	fa00 f203 	lsl.w	r2, r0, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
 800136a:	e023      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b41      	subs	r3, #65	; 0x41
 800137e:	221f      	movs	r2, #31
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43da      	mvns	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	400a      	ands	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3b41      	subs	r3, #65	; 0x41
 80013a8:	fa00 f203 	lsl.w	r2, r0, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a30      	ldr	r2, [pc, #192]	; (800147c <HAL_ADC_ConfigChannel+0x29c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10a      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1f4>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 80013ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80013d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_ADC_ConfigChannel+0x29c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10f      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a25      	ldr	r2, [pc, #148]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 80013ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 80013f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_ADC_ConfigChannel+0x29c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d12b      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x280>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_ADC_ConfigChannel+0x298>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d003      	beq.n	800141a <HAL_ADC_ConfigChannel+0x23a>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b11      	cmp	r3, #17
 8001418:	d122      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 8001420:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001424:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <HAL_ADC_ConfigChannel+0x2a0>)
 800142c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001430:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_ADC_ConfigChannel+0x298>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d111      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_ADC_ConfigChannel+0x2a4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_ADC_ConfigChannel+0x2a8>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9a      	lsrs	r2, r3, #18
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001452:	e002      	b.n	800145a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3b01      	subs	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	10000012 	.word	0x10000012
 800147c:	40012000 	.word	0x40012000
 8001480:	40012300 	.word	0x40012300
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83

0800148c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001494:	4b78      	ldr	r3, [pc, #480]	; (8001678 <ADC_Init+0x1ec>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a77      	ldr	r2, [pc, #476]	; (8001678 <ADC_Init+0x1ec>)
 800149a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800149e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80014a0:	4b75      	ldr	r3, [pc, #468]	; (8001678 <ADC_Init+0x1ec>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4973      	ldr	r1, [pc, #460]	; (8001678 <ADC_Init+0x1ec>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	021a      	lsls	r2, r3, #8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6899      	ldr	r1, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	4a58      	ldr	r2, [pc, #352]	; (800167c <ADC_Init+0x1f0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d022      	beq.n	8001566 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800152e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	e00f      	b.n	8001586 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001584:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0202 	bic.w	r2, r2, #2
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	005a      	lsls	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01b      	beq.n	80015ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	3b01      	subs	r3, #1
 80015e0:	035a      	lsls	r2, r3, #13
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	e007      	b.n	80015fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	3b01      	subs	r3, #1
 8001618:	051a      	lsls	r2, r3, #20
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800163e:	025a      	lsls	r2, r3, #9
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	029a      	lsls	r2, r3, #10
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40012300 	.word	0x40012300
 800167c:	0f000001 	.word	0x0f000001

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x40>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	05fa0000 	.word	0x05fa0000

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff8e 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff47 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff5c 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff8e 	bl	8001738 <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5d 	bl	80016e4 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffb0 	bl	80017a0 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001850:	f3bf 8f5f 	dmb	sy
}
 8001854:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_MPU_Disable+0x28>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_MPU_Disable+0x28>)
 800185c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001860:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_MPU_Disable+0x2c>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00
 8001878:	e000ed90 	.word	0xe000ed90

0800187c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_MPU_Enable+0x38>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_MPU_Enable+0x3c>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_MPU_Enable+0x3c>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800189a:	f3bf 8f4f 	dsb	sy
}
 800189e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018a0:	f3bf 8f6f 	isb	sy
}
 80018a4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed90 	.word	0xe000ed90
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	785a      	ldrb	r2, [r3, #1]
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_MPU_ConfigRegion+0x84>)
 80018ca:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d029      	beq.n	8001928 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80018d4:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <HAL_MPU_ConfigRegion+0x84>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7adb      	ldrb	r3, [r3, #11]
 80018e6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7a9b      	ldrb	r3, [r3, #10]
 80018ee:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7b9b      	ldrb	r3, [r3, #14]
 80018fe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001900:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7bdb      	ldrb	r3, [r3, #15]
 8001906:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001908:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001910:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7a1b      	ldrb	r3, [r3, #8]
 8001916:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001918:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001922:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001924:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001926:	e005      	b.n	8001934 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_MPU_ConfigRegion+0x84>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_MPU_ConfigRegion+0x84>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed90 	.word	0xe000ed90

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e175      	b.n	8001c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8164 	bne.w	8001c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d005      	beq.n	800199a <HAL_GPIO_Init+0x56>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d130      	bne.n	80019fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0201 	and.w	r2, r3, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d017      	beq.n	8001a38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80be 	beq.w	8001c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_GPIO_Init+0x324>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ae6:	4a61      	ldr	r2, [pc, #388]	; (8001c6c <HAL_GPIO_Init+0x328>)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_GPIO_Init+0x32c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d037      	beq.n	8001b82 <HAL_GPIO_Init+0x23e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a57      	ldr	r2, [pc, #348]	; (8001c74 <HAL_GPIO_Init+0x330>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d031      	beq.n	8001b7e <HAL_GPIO_Init+0x23a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a56      	ldr	r2, [pc, #344]	; (8001c78 <HAL_GPIO_Init+0x334>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d02b      	beq.n	8001b7a <HAL_GPIO_Init+0x236>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_GPIO_Init+0x338>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d025      	beq.n	8001b76 <HAL_GPIO_Init+0x232>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a54      	ldr	r2, [pc, #336]	; (8001c80 <HAL_GPIO_Init+0x33c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01f      	beq.n	8001b72 <HAL_GPIO_Init+0x22e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a53      	ldr	r2, [pc, #332]	; (8001c84 <HAL_GPIO_Init+0x340>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d019      	beq.n	8001b6e <HAL_GPIO_Init+0x22a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_GPIO_Init+0x344>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_GPIO_Init+0x226>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <HAL_GPIO_Init+0x348>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00d      	beq.n	8001b66 <HAL_GPIO_Init+0x222>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a50      	ldr	r2, [pc, #320]	; (8001c90 <HAL_GPIO_Init+0x34c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d007      	beq.n	8001b62 <HAL_GPIO_Init+0x21e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4f      	ldr	r2, [pc, #316]	; (8001c94 <HAL_GPIO_Init+0x350>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_GPIO_Init+0x21a>
 8001b5a:	2309      	movs	r3, #9
 8001b5c:	e012      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b5e:	230a      	movs	r3, #10
 8001b60:	e010      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b62:	2308      	movs	r3, #8
 8001b64:	e00e      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b66:	2307      	movs	r3, #7
 8001b68:	e00c      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	e00a      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b6e:	2305      	movs	r3, #5
 8001b70:	e008      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b72:	2304      	movs	r3, #4
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b76:	2303      	movs	r3, #3
 8001b78:	e004      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x240>
 8001b82:	2300      	movs	r3, #0
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	f002 0203 	and.w	r2, r2, #3
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b94:	4935      	ldr	r1, [pc, #212]	; (8001c6c <HAL_GPIO_Init+0x328>)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc6:	4a34      	ldr	r2, [pc, #208]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf0:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_GPIO_Init+0x354>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b0f      	cmp	r3, #15
 8001c54:	f67f ae86 	bls.w	8001964 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	40020c00 	.word	0x40020c00
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40021400 	.word	0x40021400
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	40021c00 	.word	0x40021c00
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40022400 	.word	0x40022400
 8001c98:	40013c00 	.word	0x40013c00

08001c9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40007000 	.word	0x40007000

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e29b      	b.n	800220a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8087 	beq.w	8001dee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce0:	4b96      	ldr	r3, [pc, #600]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d00c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cec:	4b93      	ldr	r3, [pc, #588]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d112      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62>
 8001cf8:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d04:	d10b      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d06:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d06c      	beq.n	8001dec <HAL_RCC_OscConfig+0x130>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d168      	bne.n	8001dec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e275      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x7a>
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a83      	ldr	r2, [pc, #524]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e02e      	b.n	8001d94 <HAL_RCC_OscConfig+0xd8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x9c>
 8001d3e:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a7e      	ldr	r2, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7b      	ldr	r2, [pc, #492]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e01d      	b.n	8001d94 <HAL_RCC_OscConfig+0xd8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0xc0>
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a75      	ldr	r2, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a72      	ldr	r2, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0xd8>
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6e      	ldr	r2, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6b      	ldr	r2, [pc, #428]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f846 	bl	8000e2c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff f842 	bl	8000e2c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e229      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe8>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f832 	bl	8000e2c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff f82e 	bl	8000e2c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e215      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x110>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d069      	beq.n	8001ece <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfa:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x190>
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x17a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e1e9      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	493d      	ldr	r1, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e040      	b.n	8001ece <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d023      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a38      	ldr	r2, [pc, #224]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe ffe4 	bl	8000e2c <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7fe ffe0 	bl	8000e2c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1c7      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4929      	ldr	r1, [pc, #164]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7fe ffc0 	bl	8000e2c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7fe ffbc 	bl	8000e2c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1a3      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d038      	beq.n	8001f4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7fe ff9d 	bl	8000e2c <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7fe ff99 	bl	8000e2c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e180      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x23a>
 8001f14:	e01a      	b.n	8001f4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x280>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7fe ff83 	bl	8000e2c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7fe ff7f 	bl	8000e2c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d903      	bls.n	8001f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e166      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
 8001f3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a4 	beq.w	80020a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b8c      	ldr	r3, [pc, #560]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10d      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b89      	ldr	r3, [pc, #548]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a88      	ldr	r2, [pc, #544]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b86      	ldr	r3, [pc, #536]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f82:	4b83      	ldr	r3, [pc, #524]	; (8002190 <HAL_RCC_OscConfig+0x4d4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f8e:	4b80      	ldr	r3, [pc, #512]	; (8002190 <HAL_RCC_OscConfig+0x4d4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7f      	ldr	r2, [pc, #508]	; (8002190 <HAL_RCC_OscConfig+0x4d4>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe ff47 	bl	8000e2c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe ff43 	bl	8000e2c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	; 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e12a      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb4:	4b76      	ldr	r3, [pc, #472]	; (8002190 <HAL_RCC_OscConfig+0x4d4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x31a>
 8001fc8:	4b70      	ldr	r3, [pc, #448]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a6f      	ldr	r2, [pc, #444]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	e02d      	b.n	8002032 <HAL_RCC_OscConfig+0x376>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x33c>
 8001fde:	4b6b      	ldr	r3, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	e01c      	b.n	8002032 <HAL_RCC_OscConfig+0x376>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x35e>
 8002000:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a61      	ldr	r2, [pc, #388]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b5f      	ldr	r3, [pc, #380]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a5e      	ldr	r2, [pc, #376]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x376>
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a5b      	ldr	r2, [pc, #364]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7fe fef7 	bl	8000e2c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fef3 	bl	8000e2c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0d8      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <HAL_RCC_OscConfig+0x386>
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7fe fee1 	bl	8000e2c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fedd 	bl	8000e2c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0c2      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a3c      	ldr	r2, [pc, #240]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80ae 	beq.w	8002208 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d06d      	beq.n	8002194 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d14b      	bne.n	8002158 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 80020c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe feae 	bl	8000e2c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe feaa 	bl	8000e2c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e091      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	3b01      	subs	r3, #1
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	071b      	lsls	r3, r3, #28
 800211e:	491b      	ldr	r1, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fe7c 	bl	8000e2c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fe78 	bl	8000e2c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e05f      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x47c>
 8002156:	e057      	b.n	8002208 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 800215e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fe62 	bl	8000e2c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fe5e 	bl	8000e2c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e045      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_OscConfig+0x4d0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x4b0>
 800218a:	e03d      	b.n	8002208 <HAL_RCC_OscConfig+0x54c>
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_RCC_OscConfig+0x558>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d030      	beq.n	8002204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d129      	bne.n	8002204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d122      	bne.n	8002204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d119      	bne.n	8002204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10f      	bne.n	8002204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d0      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d910      	bls.n	8002260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 020f 	bic.w	r2, r3, #15
 8002246:	4965      	ldr	r1, [pc, #404]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 800227e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800229a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d040      	beq.n	800233c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e073      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4936      	ldr	r1, [pc, #216]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230c:	f7fe fd8e 	bl	8000e2c <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fd8a 	bl	8000e2c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e053      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 020f 	bic.w	r2, r3, #15
 8002352:	4922      	ldr	r1, [pc, #136]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1cc>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1d0>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1d4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fcea 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00
 80023e0:	40023800 	.word	0x40023800
 80023e4:	080047b4 	.word	0x080047b4
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b090      	sub	sp, #64	; 0x40
 80023f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
 80023fc:	2300      	movs	r3, #0
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002400:	2300      	movs	r3, #0
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d00d      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x40>
 8002414:	2b08      	cmp	r3, #8
 8002416:	f200 80a1 	bhi.w	800255c <HAL_RCC_GetSysClockFreq+0x16c>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x34>
 800241e:	2b04      	cmp	r3, #4
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x3a>
 8002422:	e09b      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_GetSysClockFreq+0x184>)
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002428:	e09b      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_GetSysClockFreq+0x188>)
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800242e:	e098      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800243a:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d028      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	2200      	movs	r2, #0
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	627a      	str	r2, [r7, #36]	; 0x24
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002458:	2100      	movs	r1, #0
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_GetSysClockFreq+0x188>)
 800245c:	fb03 f201 	mul.w	r2, r3, r1
 8002460:	2300      	movs	r3, #0
 8002462:	fb00 f303 	mul.w	r3, r0, r3
 8002466:	4413      	add	r3, r2
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <HAL_RCC_GetSysClockFreq+0x188>)
 800246a:	fba0 1202 	umull	r1, r2, r0, r2
 800246e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002470:	460a      	mov	r2, r1
 8002472:	62ba      	str	r2, [r7, #40]	; 0x28
 8002474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002476:	4413      	add	r3, r2
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	2200      	movs	r2, #0
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	61fa      	str	r2, [r7, #28]
 8002482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002486:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800248a:	f7fd ff31 	bl	80002f0 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4613      	mov	r3, r2
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002496:	e053      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	2200      	movs	r2, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	617a      	str	r2, [r7, #20]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024aa:	f04f 0b00 	mov.w	fp, #0
 80024ae:	4652      	mov	r2, sl
 80024b0:	465b      	mov	r3, fp
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	0159      	lsls	r1, r3, #5
 80024bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c0:	0150      	lsls	r0, r2, #5
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	ebb2 080a 	subs.w	r8, r2, sl
 80024ca:	eb63 090b 	sbc.w	r9, r3, fp
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024e2:	ebb2 0408 	subs.w	r4, r2, r8
 80024e6:	eb63 0509 	sbc.w	r5, r3, r9
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	00eb      	lsls	r3, r5, #3
 80024f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f8:	00e2      	lsls	r2, r4, #3
 80024fa:	4614      	mov	r4, r2
 80024fc:	461d      	mov	r5, r3
 80024fe:	eb14 030a 	adds.w	r3, r4, sl
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	eb45 030b 	adc.w	r3, r5, fp
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002516:	4629      	mov	r1, r5
 8002518:	028b      	lsls	r3, r1, #10
 800251a:	4621      	mov	r1, r4
 800251c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002520:	4621      	mov	r1, r4
 8002522:	028a      	lsls	r2, r1, #10
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	2200      	movs	r2, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	60fa      	str	r2, [r7, #12]
 8002530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002534:	f7fd fedc 	bl	80002f0 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4613      	mov	r3, r2
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_GetSysClockFreq+0x180>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	3301      	adds	r3, #1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800255a:	e002      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetSysClockFreq+0x184>)
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002564:	4618      	mov	r0, r3
 8002566:	3740      	adds	r7, #64	; 0x40
 8002568:	46bd      	mov	sp, r7
 800256a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	00f42400 	.word	0x00f42400
 8002578:	017d7840 	.word	0x017d7840

0800257c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff0 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	080047c4 	.word	0x080047c4

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c0:	f7ff ffdc 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0b5b      	lsrs	r3, r3, #13
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	080047c4 	.word	0x080047c4

080025e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800260c:	4b69      	ldr	r3, [pc, #420]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a68      	ldr	r2, [pc, #416]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002612:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002616:	6093      	str	r3, [r2, #8]
 8002618:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	4964      	ldr	r1, [pc, #400]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800262e:	2301      	movs	r3, #1
 8002630:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d017      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002644:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800265c:	d101      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d017      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800267a:	4b4e      	ldr	r3, [pc, #312]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002680:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	494a      	ldr	r1, [pc, #296]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002698:	d101      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 808b 	beq.w	80027de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
 80026d4:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a34      	ldr	r2, [pc, #208]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fe fb9e 	bl	8000e2c <HAL_GetTick>
 80026f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f4:	f7fe fb9a 	bl	8000e2c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e38f      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002712:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d035      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d02e      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002738:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d114      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fb62 	bl	8000e2c <HAL_GetTick>
 8002768:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fb5e 	bl	8000e2c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e351      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ee      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800279a:	d111      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027aa:	400b      	ands	r3, r1
 80027ac:	4901      	ldr	r1, [pc, #4]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
 80027b2:	e00b      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000
 80027bc:	0ffffcff 	.word	0x0ffffcff
 80027c0:	4bac      	ldr	r3, [pc, #688]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4aab      	ldr	r2, [pc, #684]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ca:	6093      	str	r3, [r2, #8]
 80027cc:	4ba9      	ldr	r3, [pc, #676]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	49a6      	ldr	r1, [pc, #664]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027ea:	4ba2      	ldr	r3, [pc, #648]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f0:	4aa0      	ldr	r2, [pc, #640]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027fa:	4b9e      	ldr	r3, [pc, #632]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	499b      	ldr	r1, [pc, #620]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002818:	4b96      	ldr	r3, [pc, #600]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002826:	4993      	ldr	r1, [pc, #588]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800283a:	4b8e      	ldr	r3, [pc, #568]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002848:	498a      	ldr	r1, [pc, #552]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800285c:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286a:	4982      	ldr	r1, [pc, #520]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4979      	ldr	r1, [pc, #484]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a0:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4971      	ldr	r1, [pc, #452]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f023 020c 	bic.w	r2, r3, #12
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	4968      	ldr	r1, [pc, #416]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e4:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	4960      	ldr	r1, [pc, #384]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002906:	4b5b      	ldr	r3, [pc, #364]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002914:	4957      	ldr	r1, [pc, #348]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002928:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	494f      	ldr	r1, [pc, #316]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	4946      	ldr	r1, [pc, #280]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	493e      	ldr	r1, [pc, #248]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	4935      	ldr	r1, [pc, #212]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029be:	492d      	ldr	r1, [pc, #180]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d011      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e0:	4924      	ldr	r1, [pc, #144]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f0:	d101      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	4914      	ldr	r1, [pc, #80]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a44:	490b      	ldr	r1, [pc, #44]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a68:	4902      	ldr	r1, [pc, #8]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a70:	e002      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a84:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	4986      	ldr	r1, [pc, #536]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002aa8:	4b81      	ldr	r3, [pc, #516]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab8:	497d      	ldr	r1, [pc, #500]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d006      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80d6 	beq.w	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ad4:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a75      	ldr	r2, [pc, #468]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ada:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae0:	f7fe f9a4 	bl	8000e2c <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ae8:	f7fe f9a0 	bl	8000e2c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e195      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002afa:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d021      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11d      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b28:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2e:	0e1b      	lsrs	r3, r3, #24
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	019a      	lsls	r2, r3, #6
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	4958      	ldr	r1, [pc, #352]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d02e      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b80:	d129      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b82:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b90:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b96:	0f1b      	lsrs	r3, r3, #28
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	019a      	lsls	r2, r3, #6
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	061b      	lsls	r3, r3, #24
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	071b      	lsls	r3, r3, #28
 8002bb6:	493e      	ldr	r1, [pc, #248]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc4:	f023 021f 	bic.w	r2, r3, #31
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	4938      	ldr	r1, [pc, #224]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01d      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be8:	0e1b      	lsrs	r3, r3, #24
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf6:	0f1b      	lsrs	r3, r3, #28
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	019a      	lsls	r2, r3, #6
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	4926      	ldr	r1, [pc, #152]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	019a      	lsls	r2, r3, #6
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	071b      	lsls	r3, r3, #28
 8002c46:	491a      	ldr	r1, [pc, #104]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5a:	f7fe f8e7 	bl	8000e2c <HAL_GetTick>
 8002c5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c62:	f7fe f8e3 	bl	8000e2c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b64      	cmp	r3, #100	; 0x64
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0d8      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	f040 80ce 	bne.w	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c94:	f7fe f8ca 	bl	8000e2c <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c9c:	f7fe f8c6 	bl	8000e2c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d904      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0bb      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cb4:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc0:	d0ec      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02e      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d12a      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cea:	4b51      	ldr	r3, [pc, #324]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	0f1b      	lsrs	r3, r3, #28
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	019a      	lsls	r2, r3, #6
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	071b      	lsls	r3, r3, #28
 8002d1e:	4944      	ldr	r1, [pc, #272]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d26:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	493d      	ldr	r1, [pc, #244]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d022      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d54:	d11d      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	0e1b      	lsrs	r3, r3, #24
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	0f1b      	lsrs	r3, r3, #28
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	019a      	lsls	r2, r3, #6
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	061b      	lsls	r3, r3, #24
 8002d84:	431a      	orrs	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	071b      	lsls	r3, r3, #28
 8002d8a:	4929      	ldr	r1, [pc, #164]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d028      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	0e1b      	lsrs	r3, r3, #24
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	019a      	lsls	r2, r3, #6
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	071b      	lsls	r3, r3, #28
 8002dd2:	4917      	ldr	r1, [pc, #92]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	4911      	ldr	r1, [pc, #68]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0e      	ldr	r2, [pc, #56]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe f816 	bl	8000e2c <HAL_GetTick>
 8002e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e04:	f7fe f812 	bl	8000e2c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e007      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e22:	d1ef      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e071      	b.n	8002f2e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7f5b      	ldrb	r3, [r3, #29]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fe6c 	bl	8000b38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d053      	beq.n	8002f1c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	22ca      	movs	r2, #202	; 0xca
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2253      	movs	r2, #83	; 0x53
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fa4d 	bl	8003324 <RTC_EnterInitMode>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d12a      	bne.n	8002eea <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RTC_Init+0x104>)
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6919      	ldr	r1, [r3, #16]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	041a      	lsls	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fa56 	bl	8003392 <RTC_ExitInitMode>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d110      	bne.n	8002f12 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0208 	bic.w	r2, r2, #8
 8002efe:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	22ff      	movs	r2, #255	; 0xff
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
 8002f1a:	e001      	b.n	8002f20 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	ff8fffbf 	.word	0xff8fffbf

08002f3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_RTC_SetTime+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e085      	b.n	8003064 <HAL_RTC_SetTime+0x128>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d126      	bne.n	8002fb8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa2a 	bl	80033dc <RTC_ByteToBcd2>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa23 	bl	80033dc <RTC_ByteToBcd2>
 8002f96:	4603      	mov	r3, r0
 8002f98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f9a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa1b 	bl	80033dc <RTC_ByteToBcd2>
 8002fa6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fa8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	78db      	ldrb	r3, [r3, #3]
 8002fb0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e018      	b.n	8002fea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fd8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fde:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	78db      	ldrb	r3, [r3, #3]
 8002fe4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	22ca      	movs	r2, #202	; 0xca
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2253      	movs	r2, #83	; 0x53
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f992 	bl	8003324 <RTC_EnterInitMode>
 8003000:	4603      	mov	r3, r0
 8003002:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11e      	bne.n	8003048 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	6979      	ldr	r1, [r7, #20]
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_RTC_SetTime+0x130>)
 8003012:	400b      	ands	r3, r1
 8003014:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003024:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f9a7 	bl	8003392 <RTC_ExitInitMode>
 8003044:	4603      	mov	r3, r0
 8003046:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]

  return status;
 8003062:	7cfb      	ldrb	r3, [r7, #19]
}
 8003064:	4618      	mov	r0, r3
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}
 800306c:	007f7f7f 	.word	0x007f7f7f

08003070 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RTC_GetTime+0xb8>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	0d9b      	lsrs	r3, r3, #22
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11a      	bne.n	800311e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f993 	bl	8003418 <RTC_Bcd2ToByte>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f98a 	bl	8003418 <RTC_Bcd2ToByte>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	789b      	ldrb	r3, [r3, #2]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f981 	bl	8003418 <RTC_Bcd2ToByte>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	007f7f7f 	.word	0x007f7f7f

0800312c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	7f1b      	ldrb	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_RTC_SetDate+0x1c>
 8003144:	2302      	movs	r3, #2
 8003146:	e06f      	b.n	8003228 <HAL_RTC_SetDate+0xfc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2202      	movs	r2, #2
 8003152:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10e      	bne.n	8003178 <HAL_RTC_SetDate+0x4c>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	f023 0310 	bic.w	r3, r3, #16
 800316e:	b2db      	uxtb	r3, r3
 8003170:	330a      	adds	r3, #10
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11c      	bne.n	80031b8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	78db      	ldrb	r3, [r3, #3]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f92a 	bl	80033dc <RTC_ByteToBcd2>
 8003188:	4603      	mov	r3, r0
 800318a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	785b      	ldrb	r3, [r3, #1]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f923 	bl	80033dc <RTC_ByteToBcd2>
 8003196:	4603      	mov	r3, r0
 8003198:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800319a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	789b      	ldrb	r3, [r3, #2]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f91b 	bl	80033dc <RTC_ByteToBcd2>
 80031a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e00e      	b.n	80031d6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	78db      	ldrb	r3, [r3, #3]
 80031bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031c4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	22ca      	movs	r2, #202	; 0xca
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2253      	movs	r2, #83	; 0x53
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f89c 	bl	8003324 <RTC_EnterInitMode>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	6979      	ldr	r1, [r7, #20]
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_RTC_SetDate+0x104>)
 80031fe:	400b      	ands	r3, r1
 8003200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f8c5 	bl	8003392 <RTC_ExitInitMode>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	771a      	strb	r2, [r3, #28]

  return status;
 8003226:	7cfb      	ldrb	r3, [r7, #19]
}
 8003228:	4618      	mov	r0, r3
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}
 8003230:	00ffff3f 	.word	0x00ffff3f

08003234 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_RTC_GetDate+0x9c>)
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	0c1b      	lsrs	r3, r3, #16
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	0b5b      	lsrs	r3, r3, #13
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11a      	bne.n	80032c4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	78db      	ldrb	r3, [r3, #3]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f8c0 	bl	8003418 <RTC_Bcd2ToByte>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f8b7 	bl	8003418 <RTC_Bcd2ToByte>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	789b      	ldrb	r3, [r3, #2]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f8ae 	bl	8003418 <RTC_Bcd2ToByte>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	00ffff3f 	.word	0x00ffff3f

080032d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f0:	f7fd fd9c 	bl	8000e2c <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032f6:	e009      	b.n	800330c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032f8:	f7fd fd98 	bl	8000e2c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003306:	d901      	bls.n	800330c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e007      	b.n	800331c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ee      	beq.n	80032f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d122      	bne.n	8003388 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003350:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003352:	f7fd fd6b 	bl	8000e2c <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003358:	e00c      	b.n	8003374 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800335a:	f7fd fd67 	bl	8000e2c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003368:	d904      	bls.n	8003374 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <RTC_EnterInitMode+0x64>
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d1e8      	bne.n	800335a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff89 	bl	80032d4 <HAL_RTC_WaitForSynchro>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80033ea:	e005      	b.n	80033f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	3b0a      	subs	r3, #10
 80033f6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	d8f6      	bhi.n	80033ec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	b2da      	uxtb	r2, r3
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	4313      	orrs	r3, r2
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	b2db      	uxtb	r3, r3
 8003444:	4413      	add	r3, r2
 8003446:	b2db      	uxtb	r3, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e040      	b.n	80034e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fb8c 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8b0 	bl	80035f8 <UART_SetConfig>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fb08 	bl	8003ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb8f 	bl	8003c04 <UART_CheckIdleState>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003504:	2b20      	cmp	r3, #32
 8003506:	d171      	bne.n	80035ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Transmit+0x24>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e06a      	b.n	80035ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2221      	movs	r2, #33	; 0x21
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003526:	f7fd fc81 	bl	8000e2c <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d108      	bne.n	8003558 <HAL_UART_Transmit+0x68>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e003      	b.n	8003560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003560:	e02c      	b.n	80035bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fb96 	bl	8003c9e <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e038      	b.n	80035ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	3302      	adds	r3, #2
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	e007      	b.n	80035aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	3301      	adds	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1cc      	bne.n	8003562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fb63 	bl	8003c9e <UART_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e005      	b.n	80035ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	e000      	b.n	80035ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
  }
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4ba6      	ldr	r3, [pc, #664]	; (80038bc <UART_SetConfig+0x2c4>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	6979      	ldr	r1, [r7, #20]
 800362c:	430b      	orrs	r3, r1
 800362e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a94      	ldr	r2, [pc, #592]	; (80038c0 <UART_SetConfig+0x2c8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d120      	bne.n	80036b6 <UART_SetConfig+0xbe>
 8003674:	4b93      	ldr	r3, [pc, #588]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b03      	cmp	r3, #3
 8003680:	d816      	bhi.n	80036b0 <UART_SetConfig+0xb8>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0x90>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	08003699 	.word	0x08003699
 800368c:	080036a5 	.word	0x080036a5
 8003690:	0800369f 	.word	0x0800369f
 8003694:	080036ab 	.word	0x080036ab
 8003698:	2301      	movs	r3, #1
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e150      	b.n	8003940 <UART_SetConfig+0x348>
 800369e:	2302      	movs	r3, #2
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e14d      	b.n	8003940 <UART_SetConfig+0x348>
 80036a4:	2304      	movs	r3, #4
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e14a      	b.n	8003940 <UART_SetConfig+0x348>
 80036aa:	2308      	movs	r3, #8
 80036ac:	77fb      	strb	r3, [r7, #31]
 80036ae:	e147      	b.n	8003940 <UART_SetConfig+0x348>
 80036b0:	2310      	movs	r3, #16
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e144      	b.n	8003940 <UART_SetConfig+0x348>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a83      	ldr	r2, [pc, #524]	; (80038c8 <UART_SetConfig+0x2d0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d132      	bne.n	8003726 <UART_SetConfig+0x12e>
 80036c0:	4b80      	ldr	r3, [pc, #512]	; (80038c4 <UART_SetConfig+0x2cc>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d828      	bhi.n	8003720 <UART_SetConfig+0x128>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0xdc>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003721 	.word	0x08003721
 80036dc:	08003721 	.word	0x08003721
 80036e0:	08003721 	.word	0x08003721
 80036e4:	08003715 	.word	0x08003715
 80036e8:	08003721 	.word	0x08003721
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003721 	.word	0x08003721
 80036f4:	0800370f 	.word	0x0800370f
 80036f8:	08003721 	.word	0x08003721
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003721 	.word	0x08003721
 8003704:	0800371b 	.word	0x0800371b
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e118      	b.n	8003940 <UART_SetConfig+0x348>
 800370e:	2302      	movs	r3, #2
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e115      	b.n	8003940 <UART_SetConfig+0x348>
 8003714:	2304      	movs	r3, #4
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e112      	b.n	8003940 <UART_SetConfig+0x348>
 800371a:	2308      	movs	r3, #8
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e10f      	b.n	8003940 <UART_SetConfig+0x348>
 8003720:	2310      	movs	r3, #16
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e10c      	b.n	8003940 <UART_SetConfig+0x348>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a68      	ldr	r2, [pc, #416]	; (80038cc <UART_SetConfig+0x2d4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d120      	bne.n	8003772 <UART_SetConfig+0x17a>
 8003730:	4b64      	ldr	r3, [pc, #400]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800373a:	2b30      	cmp	r3, #48	; 0x30
 800373c:	d013      	beq.n	8003766 <UART_SetConfig+0x16e>
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d814      	bhi.n	800376c <UART_SetConfig+0x174>
 8003742:	2b20      	cmp	r3, #32
 8003744:	d009      	beq.n	800375a <UART_SetConfig+0x162>
 8003746:	2b20      	cmp	r3, #32
 8003748:	d810      	bhi.n	800376c <UART_SetConfig+0x174>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <UART_SetConfig+0x15c>
 800374e:	2b10      	cmp	r3, #16
 8003750:	d006      	beq.n	8003760 <UART_SetConfig+0x168>
 8003752:	e00b      	b.n	800376c <UART_SetConfig+0x174>
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e0f2      	b.n	8003940 <UART_SetConfig+0x348>
 800375a:	2302      	movs	r3, #2
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e0ef      	b.n	8003940 <UART_SetConfig+0x348>
 8003760:	2304      	movs	r3, #4
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e0ec      	b.n	8003940 <UART_SetConfig+0x348>
 8003766:	2308      	movs	r3, #8
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e0e9      	b.n	8003940 <UART_SetConfig+0x348>
 800376c:	2310      	movs	r3, #16
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e0e6      	b.n	8003940 <UART_SetConfig+0x348>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <UART_SetConfig+0x2d8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d120      	bne.n	80037be <UART_SetConfig+0x1c6>
 800377c:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <UART_SetConfig+0x2cc>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003786:	2bc0      	cmp	r3, #192	; 0xc0
 8003788:	d013      	beq.n	80037b2 <UART_SetConfig+0x1ba>
 800378a:	2bc0      	cmp	r3, #192	; 0xc0
 800378c:	d814      	bhi.n	80037b8 <UART_SetConfig+0x1c0>
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d009      	beq.n	80037a6 <UART_SetConfig+0x1ae>
 8003792:	2b80      	cmp	r3, #128	; 0x80
 8003794:	d810      	bhi.n	80037b8 <UART_SetConfig+0x1c0>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <UART_SetConfig+0x1a8>
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d006      	beq.n	80037ac <UART_SetConfig+0x1b4>
 800379e:	e00b      	b.n	80037b8 <UART_SetConfig+0x1c0>
 80037a0:	2300      	movs	r3, #0
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e0cc      	b.n	8003940 <UART_SetConfig+0x348>
 80037a6:	2302      	movs	r3, #2
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e0c9      	b.n	8003940 <UART_SetConfig+0x348>
 80037ac:	2304      	movs	r3, #4
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e0c6      	b.n	8003940 <UART_SetConfig+0x348>
 80037b2:	2308      	movs	r3, #8
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e0c3      	b.n	8003940 <UART_SetConfig+0x348>
 80037b8:	2310      	movs	r3, #16
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e0c0      	b.n	8003940 <UART_SetConfig+0x348>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a44      	ldr	r2, [pc, #272]	; (80038d4 <UART_SetConfig+0x2dc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d125      	bne.n	8003814 <UART_SetConfig+0x21c>
 80037c8:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <UART_SetConfig+0x2cc>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d6:	d017      	beq.n	8003808 <UART_SetConfig+0x210>
 80037d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037dc:	d817      	bhi.n	800380e <UART_SetConfig+0x216>
 80037de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e2:	d00b      	beq.n	80037fc <UART_SetConfig+0x204>
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d811      	bhi.n	800380e <UART_SetConfig+0x216>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <UART_SetConfig+0x1fe>
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d006      	beq.n	8003802 <UART_SetConfig+0x20a>
 80037f4:	e00b      	b.n	800380e <UART_SetConfig+0x216>
 80037f6:	2300      	movs	r3, #0
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e0a1      	b.n	8003940 <UART_SetConfig+0x348>
 80037fc:	2302      	movs	r3, #2
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e09e      	b.n	8003940 <UART_SetConfig+0x348>
 8003802:	2304      	movs	r3, #4
 8003804:	77fb      	strb	r3, [r7, #31]
 8003806:	e09b      	b.n	8003940 <UART_SetConfig+0x348>
 8003808:	2308      	movs	r3, #8
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e098      	b.n	8003940 <UART_SetConfig+0x348>
 800380e:	2310      	movs	r3, #16
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e095      	b.n	8003940 <UART_SetConfig+0x348>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <UART_SetConfig+0x2e0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d125      	bne.n	800386a <UART_SetConfig+0x272>
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800382c:	d017      	beq.n	800385e <UART_SetConfig+0x266>
 800382e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003832:	d817      	bhi.n	8003864 <UART_SetConfig+0x26c>
 8003834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003838:	d00b      	beq.n	8003852 <UART_SetConfig+0x25a>
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383e:	d811      	bhi.n	8003864 <UART_SetConfig+0x26c>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <UART_SetConfig+0x254>
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d006      	beq.n	8003858 <UART_SetConfig+0x260>
 800384a:	e00b      	b.n	8003864 <UART_SetConfig+0x26c>
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e076      	b.n	8003940 <UART_SetConfig+0x348>
 8003852:	2302      	movs	r3, #2
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e073      	b.n	8003940 <UART_SetConfig+0x348>
 8003858:	2304      	movs	r3, #4
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e070      	b.n	8003940 <UART_SetConfig+0x348>
 800385e:	2308      	movs	r3, #8
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e06d      	b.n	8003940 <UART_SetConfig+0x348>
 8003864:	2310      	movs	r3, #16
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e06a      	b.n	8003940 <UART_SetConfig+0x348>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <UART_SetConfig+0x2e4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d138      	bne.n	80038e6 <UART_SetConfig+0x2ee>
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800387e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003882:	d017      	beq.n	80038b4 <UART_SetConfig+0x2bc>
 8003884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003888:	d82a      	bhi.n	80038e0 <UART_SetConfig+0x2e8>
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388e:	d00b      	beq.n	80038a8 <UART_SetConfig+0x2b0>
 8003890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003894:	d824      	bhi.n	80038e0 <UART_SetConfig+0x2e8>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <UART_SetConfig+0x2aa>
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	d006      	beq.n	80038ae <UART_SetConfig+0x2b6>
 80038a0:	e01e      	b.n	80038e0 <UART_SetConfig+0x2e8>
 80038a2:	2300      	movs	r3, #0
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e04b      	b.n	8003940 <UART_SetConfig+0x348>
 80038a8:	2302      	movs	r3, #2
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e048      	b.n	8003940 <UART_SetConfig+0x348>
 80038ae:	2304      	movs	r3, #4
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e045      	b.n	8003940 <UART_SetConfig+0x348>
 80038b4:	2308      	movs	r3, #8
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e042      	b.n	8003940 <UART_SetConfig+0x348>
 80038ba:	bf00      	nop
 80038bc:	efff69f3 	.word	0xefff69f3
 80038c0:	40011000 	.word	0x40011000
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40004400 	.word	0x40004400
 80038cc:	40004800 	.word	0x40004800
 80038d0:	40004c00 	.word	0x40004c00
 80038d4:	40005000 	.word	0x40005000
 80038d8:	40011400 	.word	0x40011400
 80038dc:	40007800 	.word	0x40007800
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e02c      	b.n	8003940 <UART_SetConfig+0x348>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a72      	ldr	r2, [pc, #456]	; (8003ab4 <UART_SetConfig+0x4bc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d125      	bne.n	800393c <UART_SetConfig+0x344>
 80038f0:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <UART_SetConfig+0x4c0>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038fe:	d017      	beq.n	8003930 <UART_SetConfig+0x338>
 8003900:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003904:	d817      	bhi.n	8003936 <UART_SetConfig+0x33e>
 8003906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390a:	d00b      	beq.n	8003924 <UART_SetConfig+0x32c>
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	d811      	bhi.n	8003936 <UART_SetConfig+0x33e>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <UART_SetConfig+0x326>
 8003916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391a:	d006      	beq.n	800392a <UART_SetConfig+0x332>
 800391c:	e00b      	b.n	8003936 <UART_SetConfig+0x33e>
 800391e:	2300      	movs	r3, #0
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e00d      	b.n	8003940 <UART_SetConfig+0x348>
 8003924:	2302      	movs	r3, #2
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e00a      	b.n	8003940 <UART_SetConfig+0x348>
 800392a:	2304      	movs	r3, #4
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e007      	b.n	8003940 <UART_SetConfig+0x348>
 8003930:	2308      	movs	r3, #8
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e004      	b.n	8003940 <UART_SetConfig+0x348>
 8003936:	2310      	movs	r3, #16
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e001      	b.n	8003940 <UART_SetConfig+0x348>
 800393c:	2310      	movs	r3, #16
 800393e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003948:	d15b      	bne.n	8003a02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800394a:	7ffb      	ldrb	r3, [r7, #31]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d828      	bhi.n	80039a2 <UART_SetConfig+0x3aa>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <UART_SetConfig+0x360>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	080039a3 	.word	0x080039a3
 8003968:	08003993 	.word	0x08003993
 800396c:	080039a3 	.word	0x080039a3
 8003970:	080039a3 	.word	0x080039a3
 8003974:	080039a3 	.word	0x080039a3
 8003978:	0800399b 	.word	0x0800399b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800397c:	f7fe fe0a 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003980:	61b8      	str	r0, [r7, #24]
        break;
 8003982:	e013      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7fe fe1a 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003988:	61b8      	str	r0, [r7, #24]
        break;
 800398a:	e00f      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800398c:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <UART_SetConfig+0x4c4>)
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e00c      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003992:	f7fe fd2d 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003996:	61b8      	str	r0, [r7, #24]
        break;
 8003998:	e008      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399e:	61bb      	str	r3, [r7, #24]
        break;
 80039a0:	e004      	b.n	80039ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	77bb      	strb	r3, [r7, #30]
        break;
 80039aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d074      	beq.n	8003a9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	005a      	lsls	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d916      	bls.n	80039fc <UART_SetConfig+0x404>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d212      	bcs.n	80039fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f023 030f 	bic.w	r3, r3, #15
 80039de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	89fa      	ldrh	r2, [r7, #14]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e04f      	b.n	8003a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77bb      	strb	r3, [r7, #30]
 8003a00:	e04c      	b.n	8003a9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d828      	bhi.n	8003a5a <UART_SetConfig+0x462>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x418>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a5b 	.word	0x08003a5b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a5b 	.word	0x08003a5b
 8003a28:	08003a5b 	.word	0x08003a5b
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a53 	.word	0x08003a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7fe fdae 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003a38:	61b8      	str	r0, [r7, #24]
        break;
 8003a3a:	e013      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7fe fdbe 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003a40:	61b8      	str	r0, [r7, #24]
        break;
 8003a42:	e00f      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <UART_SetConfig+0x4c4>)
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e00c      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	f7fe fcd1 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003a4e:	61b8      	str	r0, [r7, #24]
        break;
 8003a50:	e008      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a56:	61bb      	str	r3, [r7, #24]
        break;
 8003a58:	e004      	b.n	8003a64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	77bb      	strb	r3, [r7, #30]
        break;
 8003a62:	bf00      	nop
    }

    if (pclk != 0U)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	085a      	lsrs	r2, r3, #1
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d909      	bls.n	8003a98 <UART_SetConfig+0x4a0>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d205      	bcs.n	8003a98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e001      	b.n	8003a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40007c00 	.word	0x40007c00
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	00f42400 	.word	0x00f42400

08003ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d10a      	bne.n	8003bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c14:	f7fd f90a 	bl	8000e2c <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d10e      	bne.n	8003c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f831 	bl	8003c9e <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e027      	b.n	8003c96 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d10e      	bne.n	8003c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f81b 	bl	8003c9e <UART_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e011      	b.n	8003c96 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b09c      	sub	sp, #112	; 0x70
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4613      	mov	r3, r2
 8003cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cae:	e0a7      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	f000 80a3 	beq.w	8003e00 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fd f8b7 	bl	8000e2c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d13f      	bne.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e6      	bne.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3308      	adds	r3, #8
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	663b      	str	r3, [r7, #96]	; 0x60
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d22:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e068      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d050      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6c:	d148      	bne.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
 8003d98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e6      	bne.n	8003d78 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dca:	623a      	str	r2, [r7, #32]
 8003dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	69f9      	ldr	r1, [r7, #28]
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e5      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e010      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	f43f af48 	beq.w	8003cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3770      	adds	r7, #112	; 0x70
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <siprintf>:
 8003e2c:	b40e      	push	{r1, r2, r3}
 8003e2e:	b500      	push	{lr}
 8003e30:	b09c      	sub	sp, #112	; 0x70
 8003e32:	ab1d      	add	r3, sp, #116	; 0x74
 8003e34:	9002      	str	r0, [sp, #8]
 8003e36:	9006      	str	r0, [sp, #24]
 8003e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e3c:	4809      	ldr	r0, [pc, #36]	; (8003e64 <siprintf+0x38>)
 8003e3e:	9107      	str	r1, [sp, #28]
 8003e40:	9104      	str	r1, [sp, #16]
 8003e42:	4909      	ldr	r1, [pc, #36]	; (8003e68 <siprintf+0x3c>)
 8003e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e48:	9105      	str	r1, [sp, #20]
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	a902      	add	r1, sp, #8
 8003e50:	f000 f992 	bl	8004178 <_svfiprintf_r>
 8003e54:	9b02      	ldr	r3, [sp, #8]
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	b01c      	add	sp, #112	; 0x70
 8003e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e60:	b003      	add	sp, #12
 8003e62:	4770      	bx	lr
 8003e64:	20000058 	.word	0x20000058
 8003e68:	ffff0208 	.word	0xffff0208

08003e6c <memset>:
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <__errno>:
 8003e7c:	4b01      	ldr	r3, [pc, #4]	; (8003e84 <__errno+0x8>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000058 	.word	0x20000058

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2600      	movs	r6, #0
 8003e94:	42a6      	cmp	r6, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4d0b      	ldr	r5, [pc, #44]	; (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f000 fc6a 	bl	8004774 <_init>
 8003ea0:	1b64      	subs	r4, r4, r5
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	42a6      	cmp	r6, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb0:	4798      	blx	r3
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eba:	4798      	blx	r3
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	08004808 	.word	0x08004808
 8003ec4:	08004808 	.word	0x08004808
 8003ec8:	08004808 	.word	0x08004808
 8003ecc:	0800480c 	.word	0x0800480c

08003ed0 <__retarget_lock_acquire_recursive>:
 8003ed0:	4770      	bx	lr

08003ed2 <__retarget_lock_release_recursive>:
 8003ed2:	4770      	bx	lr

08003ed4 <_free_r>:
 8003ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ed6:	2900      	cmp	r1, #0
 8003ed8:	d044      	beq.n	8003f64 <_free_r+0x90>
 8003eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ede:	9001      	str	r0, [sp, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ee6:	bfb8      	it	lt
 8003ee8:	18e4      	addlt	r4, r4, r3
 8003eea:	f000 f8df 	bl	80040ac <__malloc_lock>
 8003eee:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <_free_r+0x94>)
 8003ef0:	9801      	ldr	r0, [sp, #4]
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	b933      	cbnz	r3, 8003f04 <_free_r+0x30>
 8003ef6:	6063      	str	r3, [r4, #4]
 8003ef8:	6014      	str	r4, [r2, #0]
 8003efa:	b003      	add	sp, #12
 8003efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f00:	f000 b8da 	b.w	80040b8 <__malloc_unlock>
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	d908      	bls.n	8003f1a <_free_r+0x46>
 8003f08:	6825      	ldr	r5, [r4, #0]
 8003f0a:	1961      	adds	r1, r4, r5
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	bf01      	itttt	eq
 8003f10:	6819      	ldreq	r1, [r3, #0]
 8003f12:	685b      	ldreq	r3, [r3, #4]
 8003f14:	1949      	addeq	r1, r1, r5
 8003f16:	6021      	streq	r1, [r4, #0]
 8003f18:	e7ed      	b.n	8003ef6 <_free_r+0x22>
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b10b      	cbz	r3, 8003f24 <_free_r+0x50>
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	d9fa      	bls.n	8003f1a <_free_r+0x46>
 8003f24:	6811      	ldr	r1, [r2, #0]
 8003f26:	1855      	adds	r5, r2, r1
 8003f28:	42a5      	cmp	r5, r4
 8003f2a:	d10b      	bne.n	8003f44 <_free_r+0x70>
 8003f2c:	6824      	ldr	r4, [r4, #0]
 8003f2e:	4421      	add	r1, r4
 8003f30:	1854      	adds	r4, r2, r1
 8003f32:	42a3      	cmp	r3, r4
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	d1e0      	bne.n	8003efa <_free_r+0x26>
 8003f38:	681c      	ldr	r4, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	6053      	str	r3, [r2, #4]
 8003f3e:	440c      	add	r4, r1
 8003f40:	6014      	str	r4, [r2, #0]
 8003f42:	e7da      	b.n	8003efa <_free_r+0x26>
 8003f44:	d902      	bls.n	8003f4c <_free_r+0x78>
 8003f46:	230c      	movs	r3, #12
 8003f48:	6003      	str	r3, [r0, #0]
 8003f4a:	e7d6      	b.n	8003efa <_free_r+0x26>
 8003f4c:	6825      	ldr	r5, [r4, #0]
 8003f4e:	1961      	adds	r1, r4, r5
 8003f50:	428b      	cmp	r3, r1
 8003f52:	bf04      	itt	eq
 8003f54:	6819      	ldreq	r1, [r3, #0]
 8003f56:	685b      	ldreq	r3, [r3, #4]
 8003f58:	6063      	str	r3, [r4, #4]
 8003f5a:	bf04      	itt	eq
 8003f5c:	1949      	addeq	r1, r1, r5
 8003f5e:	6021      	streq	r1, [r4, #0]
 8003f60:	6054      	str	r4, [r2, #4]
 8003f62:	e7ca      	b.n	8003efa <_free_r+0x26>
 8003f64:	b003      	add	sp, #12
 8003f66:	bd30      	pop	{r4, r5, pc}
 8003f68:	200002e0 	.word	0x200002e0

08003f6c <sbrk_aligned>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4e0e      	ldr	r6, [pc, #56]	; (8003fa8 <sbrk_aligned+0x3c>)
 8003f70:	460c      	mov	r4, r1
 8003f72:	6831      	ldr	r1, [r6, #0]
 8003f74:	4605      	mov	r5, r0
 8003f76:	b911      	cbnz	r1, 8003f7e <sbrk_aligned+0x12>
 8003f78:	f000 fba6 	bl	80046c8 <_sbrk_r>
 8003f7c:	6030      	str	r0, [r6, #0]
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 fba1 	bl	80046c8 <_sbrk_r>
 8003f86:	1c43      	adds	r3, r0, #1
 8003f88:	d00a      	beq.n	8003fa0 <sbrk_aligned+0x34>
 8003f8a:	1cc4      	adds	r4, r0, #3
 8003f8c:	f024 0403 	bic.w	r4, r4, #3
 8003f90:	42a0      	cmp	r0, r4
 8003f92:	d007      	beq.n	8003fa4 <sbrk_aligned+0x38>
 8003f94:	1a21      	subs	r1, r4, r0
 8003f96:	4628      	mov	r0, r5
 8003f98:	f000 fb96 	bl	80046c8 <_sbrk_r>
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d101      	bne.n	8003fa4 <sbrk_aligned+0x38>
 8003fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	200002e4 	.word	0x200002e4

08003fac <_malloc_r>:
 8003fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb0:	1ccd      	adds	r5, r1, #3
 8003fb2:	f025 0503 	bic.w	r5, r5, #3
 8003fb6:	3508      	adds	r5, #8
 8003fb8:	2d0c      	cmp	r5, #12
 8003fba:	bf38      	it	cc
 8003fbc:	250c      	movcc	r5, #12
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	db01      	blt.n	8003fc8 <_malloc_r+0x1c>
 8003fc4:	42a9      	cmp	r1, r5
 8003fc6:	d905      	bls.n	8003fd4 <_malloc_r+0x28>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	2600      	movs	r6, #0
 8003fce:	4630      	mov	r0, r6
 8003fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80040a8 <_malloc_r+0xfc>
 8003fd8:	f000 f868 	bl	80040ac <__malloc_lock>
 8003fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe0:	461c      	mov	r4, r3
 8003fe2:	bb5c      	cbnz	r4, 800403c <_malloc_r+0x90>
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f7ff ffc0 	bl	8003f6c <sbrk_aligned>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	4604      	mov	r4, r0
 8003ff0:	d155      	bne.n	800409e <_malloc_r+0xf2>
 8003ff2:	f8d8 4000 	ldr.w	r4, [r8]
 8003ff6:	4626      	mov	r6, r4
 8003ff8:	2e00      	cmp	r6, #0
 8003ffa:	d145      	bne.n	8004088 <_malloc_r+0xdc>
 8003ffc:	2c00      	cmp	r4, #0
 8003ffe:	d048      	beq.n	8004092 <_malloc_r+0xe6>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	4631      	mov	r1, r6
 8004004:	4638      	mov	r0, r7
 8004006:	eb04 0903 	add.w	r9, r4, r3
 800400a:	f000 fb5d 	bl	80046c8 <_sbrk_r>
 800400e:	4581      	cmp	r9, r0
 8004010:	d13f      	bne.n	8004092 <_malloc_r+0xe6>
 8004012:	6821      	ldr	r1, [r4, #0]
 8004014:	1a6d      	subs	r5, r5, r1
 8004016:	4629      	mov	r1, r5
 8004018:	4638      	mov	r0, r7
 800401a:	f7ff ffa7 	bl	8003f6c <sbrk_aligned>
 800401e:	3001      	adds	r0, #1
 8004020:	d037      	beq.n	8004092 <_malloc_r+0xe6>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	442b      	add	r3, r5
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	f8d8 3000 	ldr.w	r3, [r8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d038      	beq.n	80040a2 <_malloc_r+0xf6>
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	42a2      	cmp	r2, r4
 8004034:	d12b      	bne.n	800408e <_malloc_r+0xe2>
 8004036:	2200      	movs	r2, #0
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	e00f      	b.n	800405c <_malloc_r+0xb0>
 800403c:	6822      	ldr	r2, [r4, #0]
 800403e:	1b52      	subs	r2, r2, r5
 8004040:	d41f      	bmi.n	8004082 <_malloc_r+0xd6>
 8004042:	2a0b      	cmp	r2, #11
 8004044:	d917      	bls.n	8004076 <_malloc_r+0xca>
 8004046:	1961      	adds	r1, r4, r5
 8004048:	42a3      	cmp	r3, r4
 800404a:	6025      	str	r5, [r4, #0]
 800404c:	bf18      	it	ne
 800404e:	6059      	strne	r1, [r3, #4]
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	bf08      	it	eq
 8004054:	f8c8 1000 	streq.w	r1, [r8]
 8004058:	5162      	str	r2, [r4, r5]
 800405a:	604b      	str	r3, [r1, #4]
 800405c:	4638      	mov	r0, r7
 800405e:	f104 060b 	add.w	r6, r4, #11
 8004062:	f000 f829 	bl	80040b8 <__malloc_unlock>
 8004066:	f026 0607 	bic.w	r6, r6, #7
 800406a:	1d23      	adds	r3, r4, #4
 800406c:	1af2      	subs	r2, r6, r3
 800406e:	d0ae      	beq.n	8003fce <_malloc_r+0x22>
 8004070:	1b9b      	subs	r3, r3, r6
 8004072:	50a3      	str	r3, [r4, r2]
 8004074:	e7ab      	b.n	8003fce <_malloc_r+0x22>
 8004076:	42a3      	cmp	r3, r4
 8004078:	6862      	ldr	r2, [r4, #4]
 800407a:	d1dd      	bne.n	8004038 <_malloc_r+0x8c>
 800407c:	f8c8 2000 	str.w	r2, [r8]
 8004080:	e7ec      	b.n	800405c <_malloc_r+0xb0>
 8004082:	4623      	mov	r3, r4
 8004084:	6864      	ldr	r4, [r4, #4]
 8004086:	e7ac      	b.n	8003fe2 <_malloc_r+0x36>
 8004088:	4634      	mov	r4, r6
 800408a:	6876      	ldr	r6, [r6, #4]
 800408c:	e7b4      	b.n	8003ff8 <_malloc_r+0x4c>
 800408e:	4613      	mov	r3, r2
 8004090:	e7cc      	b.n	800402c <_malloc_r+0x80>
 8004092:	230c      	movs	r3, #12
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4638      	mov	r0, r7
 8004098:	f000 f80e 	bl	80040b8 <__malloc_unlock>
 800409c:	e797      	b.n	8003fce <_malloc_r+0x22>
 800409e:	6025      	str	r5, [r4, #0]
 80040a0:	e7dc      	b.n	800405c <_malloc_r+0xb0>
 80040a2:	605b      	str	r3, [r3, #4]
 80040a4:	deff      	udf	#255	; 0xff
 80040a6:	bf00      	nop
 80040a8:	200002e0 	.word	0x200002e0

080040ac <__malloc_lock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_lock+0x8>)
 80040ae:	f7ff bf0f 	b.w	8003ed0 <__retarget_lock_acquire_recursive>
 80040b2:	bf00      	nop
 80040b4:	200002dc 	.word	0x200002dc

080040b8 <__malloc_unlock>:
 80040b8:	4801      	ldr	r0, [pc, #4]	; (80040c0 <__malloc_unlock+0x8>)
 80040ba:	f7ff bf0a 	b.w	8003ed2 <__retarget_lock_release_recursive>
 80040be:	bf00      	nop
 80040c0:	200002dc 	.word	0x200002dc

080040c4 <__ssputs_r>:
 80040c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	688e      	ldr	r6, [r1, #8]
 80040ca:	461f      	mov	r7, r3
 80040cc:	42be      	cmp	r6, r7
 80040ce:	680b      	ldr	r3, [r1, #0]
 80040d0:	4682      	mov	sl, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	4690      	mov	r8, r2
 80040d6:	d82c      	bhi.n	8004132 <__ssputs_r+0x6e>
 80040d8:	898a      	ldrh	r2, [r1, #12]
 80040da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040de:	d026      	beq.n	800412e <__ssputs_r+0x6a>
 80040e0:	6965      	ldr	r5, [r4, #20]
 80040e2:	6909      	ldr	r1, [r1, #16]
 80040e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040e8:	eba3 0901 	sub.w	r9, r3, r1
 80040ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040f0:	1c7b      	adds	r3, r7, #1
 80040f2:	444b      	add	r3, r9
 80040f4:	106d      	asrs	r5, r5, #1
 80040f6:	429d      	cmp	r5, r3
 80040f8:	bf38      	it	cc
 80040fa:	461d      	movcc	r5, r3
 80040fc:	0553      	lsls	r3, r2, #21
 80040fe:	d527      	bpl.n	8004150 <__ssputs_r+0x8c>
 8004100:	4629      	mov	r1, r5
 8004102:	f7ff ff53 	bl	8003fac <_malloc_r>
 8004106:	4606      	mov	r6, r0
 8004108:	b360      	cbz	r0, 8004164 <__ssputs_r+0xa0>
 800410a:	6921      	ldr	r1, [r4, #16]
 800410c:	464a      	mov	r2, r9
 800410e:	f000 faeb 	bl	80046e8 <memcpy>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	6126      	str	r6, [r4, #16]
 8004120:	6165      	str	r5, [r4, #20]
 8004122:	444e      	add	r6, r9
 8004124:	eba5 0509 	sub.w	r5, r5, r9
 8004128:	6026      	str	r6, [r4, #0]
 800412a:	60a5      	str	r5, [r4, #8]
 800412c:	463e      	mov	r6, r7
 800412e:	42be      	cmp	r6, r7
 8004130:	d900      	bls.n	8004134 <__ssputs_r+0x70>
 8004132:	463e      	mov	r6, r7
 8004134:	6820      	ldr	r0, [r4, #0]
 8004136:	4632      	mov	r2, r6
 8004138:	4641      	mov	r1, r8
 800413a:	f000 faab 	bl	8004694 <memmove>
 800413e:	68a3      	ldr	r3, [r4, #8]
 8004140:	1b9b      	subs	r3, r3, r6
 8004142:	60a3      	str	r3, [r4, #8]
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	4433      	add	r3, r6
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	2000      	movs	r0, #0
 800414c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004150:	462a      	mov	r2, r5
 8004152:	f000 fad7 	bl	8004704 <_realloc_r>
 8004156:	4606      	mov	r6, r0
 8004158:	2800      	cmp	r0, #0
 800415a:	d1e0      	bne.n	800411e <__ssputs_r+0x5a>
 800415c:	6921      	ldr	r1, [r4, #16]
 800415e:	4650      	mov	r0, sl
 8004160:	f7ff feb8 	bl	8003ed4 <_free_r>
 8004164:	230c      	movs	r3, #12
 8004166:	f8ca 3000 	str.w	r3, [sl]
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004170:	81a3      	strh	r3, [r4, #12]
 8004172:	f04f 30ff 	mov.w	r0, #4294967295
 8004176:	e7e9      	b.n	800414c <__ssputs_r+0x88>

08004178 <_svfiprintf_r>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	4698      	mov	r8, r3
 800417e:	898b      	ldrh	r3, [r1, #12]
 8004180:	061b      	lsls	r3, r3, #24
 8004182:	b09d      	sub	sp, #116	; 0x74
 8004184:	4607      	mov	r7, r0
 8004186:	460d      	mov	r5, r1
 8004188:	4614      	mov	r4, r2
 800418a:	d50e      	bpl.n	80041aa <_svfiprintf_r+0x32>
 800418c:	690b      	ldr	r3, [r1, #16]
 800418e:	b963      	cbnz	r3, 80041aa <_svfiprintf_r+0x32>
 8004190:	2140      	movs	r1, #64	; 0x40
 8004192:	f7ff ff0b 	bl	8003fac <_malloc_r>
 8004196:	6028      	str	r0, [r5, #0]
 8004198:	6128      	str	r0, [r5, #16]
 800419a:	b920      	cbnz	r0, 80041a6 <_svfiprintf_r+0x2e>
 800419c:	230c      	movs	r3, #12
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	e0d0      	b.n	8004348 <_svfiprintf_r+0x1d0>
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	616b      	str	r3, [r5, #20]
 80041aa:	2300      	movs	r3, #0
 80041ac:	9309      	str	r3, [sp, #36]	; 0x24
 80041ae:	2320      	movs	r3, #32
 80041b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b8:	2330      	movs	r3, #48	; 0x30
 80041ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004360 <_svfiprintf_r+0x1e8>
 80041be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041c2:	f04f 0901 	mov.w	r9, #1
 80041c6:	4623      	mov	r3, r4
 80041c8:	469a      	mov	sl, r3
 80041ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ce:	b10a      	cbz	r2, 80041d4 <_svfiprintf_r+0x5c>
 80041d0:	2a25      	cmp	r2, #37	; 0x25
 80041d2:	d1f9      	bne.n	80041c8 <_svfiprintf_r+0x50>
 80041d4:	ebba 0b04 	subs.w	fp, sl, r4
 80041d8:	d00b      	beq.n	80041f2 <_svfiprintf_r+0x7a>
 80041da:	465b      	mov	r3, fp
 80041dc:	4622      	mov	r2, r4
 80041de:	4629      	mov	r1, r5
 80041e0:	4638      	mov	r0, r7
 80041e2:	f7ff ff6f 	bl	80040c4 <__ssputs_r>
 80041e6:	3001      	adds	r0, #1
 80041e8:	f000 80a9 	beq.w	800433e <_svfiprintf_r+0x1c6>
 80041ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ee:	445a      	add	r2, fp
 80041f0:	9209      	str	r2, [sp, #36]	; 0x24
 80041f2:	f89a 3000 	ldrb.w	r3, [sl]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80a1 	beq.w	800433e <_svfiprintf_r+0x1c6>
 80041fc:	2300      	movs	r3, #0
 80041fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004206:	f10a 0a01 	add.w	sl, sl, #1
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	9307      	str	r3, [sp, #28]
 800420e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004212:	931a      	str	r3, [sp, #104]	; 0x68
 8004214:	4654      	mov	r4, sl
 8004216:	2205      	movs	r2, #5
 8004218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800421c:	4850      	ldr	r0, [pc, #320]	; (8004360 <_svfiprintf_r+0x1e8>)
 800421e:	f7fc f817 	bl	8000250 <memchr>
 8004222:	9a04      	ldr	r2, [sp, #16]
 8004224:	b9d8      	cbnz	r0, 800425e <_svfiprintf_r+0xe6>
 8004226:	06d0      	lsls	r0, r2, #27
 8004228:	bf44      	itt	mi
 800422a:	2320      	movmi	r3, #32
 800422c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004230:	0711      	lsls	r1, r2, #28
 8004232:	bf44      	itt	mi
 8004234:	232b      	movmi	r3, #43	; 0x2b
 8004236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800423a:	f89a 3000 	ldrb.w	r3, [sl]
 800423e:	2b2a      	cmp	r3, #42	; 0x2a
 8004240:	d015      	beq.n	800426e <_svfiprintf_r+0xf6>
 8004242:	9a07      	ldr	r2, [sp, #28]
 8004244:	4654      	mov	r4, sl
 8004246:	2000      	movs	r0, #0
 8004248:	f04f 0c0a 	mov.w	ip, #10
 800424c:	4621      	mov	r1, r4
 800424e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004252:	3b30      	subs	r3, #48	; 0x30
 8004254:	2b09      	cmp	r3, #9
 8004256:	d94d      	bls.n	80042f4 <_svfiprintf_r+0x17c>
 8004258:	b1b0      	cbz	r0, 8004288 <_svfiprintf_r+0x110>
 800425a:	9207      	str	r2, [sp, #28]
 800425c:	e014      	b.n	8004288 <_svfiprintf_r+0x110>
 800425e:	eba0 0308 	sub.w	r3, r0, r8
 8004262:	fa09 f303 	lsl.w	r3, r9, r3
 8004266:	4313      	orrs	r3, r2
 8004268:	9304      	str	r3, [sp, #16]
 800426a:	46a2      	mov	sl, r4
 800426c:	e7d2      	b.n	8004214 <_svfiprintf_r+0x9c>
 800426e:	9b03      	ldr	r3, [sp, #12]
 8004270:	1d19      	adds	r1, r3, #4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	9103      	str	r1, [sp, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	bfbb      	ittet	lt
 800427a:	425b      	neglt	r3, r3
 800427c:	f042 0202 	orrlt.w	r2, r2, #2
 8004280:	9307      	strge	r3, [sp, #28]
 8004282:	9307      	strlt	r3, [sp, #28]
 8004284:	bfb8      	it	lt
 8004286:	9204      	strlt	r2, [sp, #16]
 8004288:	7823      	ldrb	r3, [r4, #0]
 800428a:	2b2e      	cmp	r3, #46	; 0x2e
 800428c:	d10c      	bne.n	80042a8 <_svfiprintf_r+0x130>
 800428e:	7863      	ldrb	r3, [r4, #1]
 8004290:	2b2a      	cmp	r3, #42	; 0x2a
 8004292:	d134      	bne.n	80042fe <_svfiprintf_r+0x186>
 8004294:	9b03      	ldr	r3, [sp, #12]
 8004296:	1d1a      	adds	r2, r3, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	9203      	str	r2, [sp, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	bfb8      	it	lt
 80042a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80042a4:	3402      	adds	r4, #2
 80042a6:	9305      	str	r3, [sp, #20]
 80042a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004370 <_svfiprintf_r+0x1f8>
 80042ac:	7821      	ldrb	r1, [r4, #0]
 80042ae:	2203      	movs	r2, #3
 80042b0:	4650      	mov	r0, sl
 80042b2:	f7fb ffcd 	bl	8000250 <memchr>
 80042b6:	b138      	cbz	r0, 80042c8 <_svfiprintf_r+0x150>
 80042b8:	9b04      	ldr	r3, [sp, #16]
 80042ba:	eba0 000a 	sub.w	r0, r0, sl
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	4082      	lsls	r2, r0
 80042c2:	4313      	orrs	r3, r2
 80042c4:	3401      	adds	r4, #1
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042cc:	4825      	ldr	r0, [pc, #148]	; (8004364 <_svfiprintf_r+0x1ec>)
 80042ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042d2:	2206      	movs	r2, #6
 80042d4:	f7fb ffbc 	bl	8000250 <memchr>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d038      	beq.n	800434e <_svfiprintf_r+0x1d6>
 80042dc:	4b22      	ldr	r3, [pc, #136]	; (8004368 <_svfiprintf_r+0x1f0>)
 80042de:	bb1b      	cbnz	r3, 8004328 <_svfiprintf_r+0x1b0>
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	3307      	adds	r3, #7
 80042e4:	f023 0307 	bic.w	r3, r3, #7
 80042e8:	3308      	adds	r3, #8
 80042ea:	9303      	str	r3, [sp, #12]
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	4433      	add	r3, r6
 80042f0:	9309      	str	r3, [sp, #36]	; 0x24
 80042f2:	e768      	b.n	80041c6 <_svfiprintf_r+0x4e>
 80042f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f8:	460c      	mov	r4, r1
 80042fa:	2001      	movs	r0, #1
 80042fc:	e7a6      	b.n	800424c <_svfiprintf_r+0xd4>
 80042fe:	2300      	movs	r3, #0
 8004300:	3401      	adds	r4, #1
 8004302:	9305      	str	r3, [sp, #20]
 8004304:	4619      	mov	r1, r3
 8004306:	f04f 0c0a 	mov.w	ip, #10
 800430a:	4620      	mov	r0, r4
 800430c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004310:	3a30      	subs	r2, #48	; 0x30
 8004312:	2a09      	cmp	r2, #9
 8004314:	d903      	bls.n	800431e <_svfiprintf_r+0x1a6>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0c6      	beq.n	80042a8 <_svfiprintf_r+0x130>
 800431a:	9105      	str	r1, [sp, #20]
 800431c:	e7c4      	b.n	80042a8 <_svfiprintf_r+0x130>
 800431e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004322:	4604      	mov	r4, r0
 8004324:	2301      	movs	r3, #1
 8004326:	e7f0      	b.n	800430a <_svfiprintf_r+0x192>
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	462a      	mov	r2, r5
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <_svfiprintf_r+0x1f4>)
 8004330:	a904      	add	r1, sp, #16
 8004332:	4638      	mov	r0, r7
 8004334:	f3af 8000 	nop.w
 8004338:	1c42      	adds	r2, r0, #1
 800433a:	4606      	mov	r6, r0
 800433c:	d1d6      	bne.n	80042ec <_svfiprintf_r+0x174>
 800433e:	89ab      	ldrh	r3, [r5, #12]
 8004340:	065b      	lsls	r3, r3, #25
 8004342:	f53f af2d 	bmi.w	80041a0 <_svfiprintf_r+0x28>
 8004346:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004348:	b01d      	add	sp, #116	; 0x74
 800434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434e:	ab03      	add	r3, sp, #12
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	462a      	mov	r2, r5
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <_svfiprintf_r+0x1f4>)
 8004356:	a904      	add	r1, sp, #16
 8004358:	4638      	mov	r0, r7
 800435a:	f000 f879 	bl	8004450 <_printf_i>
 800435e:	e7eb      	b.n	8004338 <_svfiprintf_r+0x1c0>
 8004360:	080047cc 	.word	0x080047cc
 8004364:	080047d6 	.word	0x080047d6
 8004368:	00000000 	.word	0x00000000
 800436c:	080040c5 	.word	0x080040c5
 8004370:	080047d2 	.word	0x080047d2

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4616      	mov	r6, r2
 800437a:	4699      	mov	r9, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004384:	4293      	cmp	r3, r2
 8004386:	bfb8      	it	lt
 8004388:	4613      	movlt	r3, r2
 800438a:	6033      	str	r3, [r6, #0]
 800438c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004390:	4607      	mov	r7, r0
 8004392:	460c      	mov	r4, r1
 8004394:	b10a      	cbz	r2, 800439a <_printf_common+0x26>
 8004396:	3301      	adds	r3, #1
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	bf42      	ittt	mi
 80043a0:	6833      	ldrmi	r3, [r6, #0]
 80043a2:	3302      	addmi	r3, #2
 80043a4:	6033      	strmi	r3, [r6, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	f015 0506 	ands.w	r5, r5, #6
 80043ac:	d106      	bne.n	80043bc <_printf_common+0x48>
 80043ae:	f104 0a19 	add.w	sl, r4, #25
 80043b2:	68e3      	ldr	r3, [r4, #12]
 80043b4:	6832      	ldr	r2, [r6, #0]
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	dc26      	bgt.n	800440a <_printf_common+0x96>
 80043bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043c0:	1e13      	subs	r3, r2, #0
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	bf18      	it	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	0692      	lsls	r2, r2, #26
 80043ca:	d42b      	bmi.n	8004424 <_printf_common+0xb0>
 80043cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043d0:	4649      	mov	r1, r9
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	3001      	adds	r0, #1
 80043d8:	d01e      	beq.n	8004418 <_printf_common+0xa4>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	6922      	ldr	r2, [r4, #16]
 80043de:	f003 0306 	and.w	r3, r3, #6
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf02      	ittt	eq
 80043e6:	68e5      	ldreq	r5, [r4, #12]
 80043e8:	6833      	ldreq	r3, [r6, #0]
 80043ea:	1aed      	subeq	r5, r5, r3
 80043ec:	68a3      	ldr	r3, [r4, #8]
 80043ee:	bf0c      	ite	eq
 80043f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f4:	2500      	movne	r5, #0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bfc4      	itt	gt
 80043fa:	1a9b      	subgt	r3, r3, r2
 80043fc:	18ed      	addgt	r5, r5, r3
 80043fe:	2600      	movs	r6, #0
 8004400:	341a      	adds	r4, #26
 8004402:	42b5      	cmp	r5, r6
 8004404:	d11a      	bne.n	800443c <_printf_common+0xc8>
 8004406:	2000      	movs	r0, #0
 8004408:	e008      	b.n	800441c <_printf_common+0xa8>
 800440a:	2301      	movs	r3, #1
 800440c:	4652      	mov	r2, sl
 800440e:	4649      	mov	r1, r9
 8004410:	4638      	mov	r0, r7
 8004412:	47c0      	blx	r8
 8004414:	3001      	adds	r0, #1
 8004416:	d103      	bne.n	8004420 <_printf_common+0xac>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004420:	3501      	adds	r5, #1
 8004422:	e7c6      	b.n	80043b2 <_printf_common+0x3e>
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	2030      	movs	r0, #48	; 0x30
 800442a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800442e:	4422      	add	r2, r4
 8004430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004438:	3302      	adds	r3, #2
 800443a:	e7c7      	b.n	80043cc <_printf_common+0x58>
 800443c:	2301      	movs	r3, #1
 800443e:	4622      	mov	r2, r4
 8004440:	4649      	mov	r1, r9
 8004442:	4638      	mov	r0, r7
 8004444:	47c0      	blx	r8
 8004446:	3001      	adds	r0, #1
 8004448:	d0e6      	beq.n	8004418 <_printf_common+0xa4>
 800444a:	3601      	adds	r6, #1
 800444c:	e7d9      	b.n	8004402 <_printf_common+0x8e>
	...

08004450 <_printf_i>:
 8004450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	7e0f      	ldrb	r7, [r1, #24]
 8004456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004458:	2f78      	cmp	r7, #120	; 0x78
 800445a:	4691      	mov	r9, r2
 800445c:	4680      	mov	r8, r0
 800445e:	460c      	mov	r4, r1
 8004460:	469a      	mov	sl, r3
 8004462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004466:	d807      	bhi.n	8004478 <_printf_i+0x28>
 8004468:	2f62      	cmp	r7, #98	; 0x62
 800446a:	d80a      	bhi.n	8004482 <_printf_i+0x32>
 800446c:	2f00      	cmp	r7, #0
 800446e:	f000 80d4 	beq.w	800461a <_printf_i+0x1ca>
 8004472:	2f58      	cmp	r7, #88	; 0x58
 8004474:	f000 80c0 	beq.w	80045f8 <_printf_i+0x1a8>
 8004478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800447c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004480:	e03a      	b.n	80044f8 <_printf_i+0xa8>
 8004482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004486:	2b15      	cmp	r3, #21
 8004488:	d8f6      	bhi.n	8004478 <_printf_i+0x28>
 800448a:	a101      	add	r1, pc, #4	; (adr r1, 8004490 <_printf_i+0x40>)
 800448c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044fd 	.word	0x080044fd
 8004498:	08004479 	.word	0x08004479
 800449c:	08004479 	.word	0x08004479
 80044a0:	08004479 	.word	0x08004479
 80044a4:	08004479 	.word	0x08004479
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004479 	.word	0x08004479
 80044b0:	08004479 	.word	0x08004479
 80044b4:	08004479 	.word	0x08004479
 80044b8:	08004479 	.word	0x08004479
 80044bc:	08004601 	.word	0x08004601
 80044c0:	08004529 	.word	0x08004529
 80044c4:	080045bb 	.word	0x080045bb
 80044c8:	08004479 	.word	0x08004479
 80044cc:	08004479 	.word	0x08004479
 80044d0:	08004623 	.word	0x08004623
 80044d4:	08004479 	.word	0x08004479
 80044d8:	08004529 	.word	0x08004529
 80044dc:	08004479 	.word	0x08004479
 80044e0:	08004479 	.word	0x08004479
 80044e4:	080045c3 	.word	0x080045c3
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	1d1a      	adds	r2, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	602a      	str	r2, [r5, #0]
 80044f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f8:	2301      	movs	r3, #1
 80044fa:	e09f      	b.n	800463c <_printf_i+0x1ec>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	682b      	ldr	r3, [r5, #0]
 8004500:	0607      	lsls	r7, r0, #24
 8004502:	f103 0104 	add.w	r1, r3, #4
 8004506:	6029      	str	r1, [r5, #0]
 8004508:	d501      	bpl.n	800450e <_printf_i+0xbe>
 800450a:	681e      	ldr	r6, [r3, #0]
 800450c:	e003      	b.n	8004516 <_printf_i+0xc6>
 800450e:	0646      	lsls	r6, r0, #25
 8004510:	d5fb      	bpl.n	800450a <_printf_i+0xba>
 8004512:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004516:	2e00      	cmp	r6, #0
 8004518:	da03      	bge.n	8004522 <_printf_i+0xd2>
 800451a:	232d      	movs	r3, #45	; 0x2d
 800451c:	4276      	negs	r6, r6
 800451e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004522:	485a      	ldr	r0, [pc, #360]	; (800468c <_printf_i+0x23c>)
 8004524:	230a      	movs	r3, #10
 8004526:	e012      	b.n	800454e <_printf_i+0xfe>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	1d19      	adds	r1, r3, #4
 800452e:	6029      	str	r1, [r5, #0]
 8004530:	0605      	lsls	r5, r0, #24
 8004532:	d501      	bpl.n	8004538 <_printf_i+0xe8>
 8004534:	681e      	ldr	r6, [r3, #0]
 8004536:	e002      	b.n	800453e <_printf_i+0xee>
 8004538:	0641      	lsls	r1, r0, #25
 800453a:	d5fb      	bpl.n	8004534 <_printf_i+0xe4>
 800453c:	881e      	ldrh	r6, [r3, #0]
 800453e:	4853      	ldr	r0, [pc, #332]	; (800468c <_printf_i+0x23c>)
 8004540:	2f6f      	cmp	r7, #111	; 0x6f
 8004542:	bf0c      	ite	eq
 8004544:	2308      	moveq	r3, #8
 8004546:	230a      	movne	r3, #10
 8004548:	2100      	movs	r1, #0
 800454a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800454e:	6865      	ldr	r5, [r4, #4]
 8004550:	60a5      	str	r5, [r4, #8]
 8004552:	2d00      	cmp	r5, #0
 8004554:	bfa2      	ittt	ge
 8004556:	6821      	ldrge	r1, [r4, #0]
 8004558:	f021 0104 	bicge.w	r1, r1, #4
 800455c:	6021      	strge	r1, [r4, #0]
 800455e:	b90e      	cbnz	r6, 8004564 <_printf_i+0x114>
 8004560:	2d00      	cmp	r5, #0
 8004562:	d04b      	beq.n	80045fc <_printf_i+0x1ac>
 8004564:	4615      	mov	r5, r2
 8004566:	fbb6 f1f3 	udiv	r1, r6, r3
 800456a:	fb03 6711 	mls	r7, r3, r1, r6
 800456e:	5dc7      	ldrb	r7, [r0, r7]
 8004570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004574:	4637      	mov	r7, r6
 8004576:	42bb      	cmp	r3, r7
 8004578:	460e      	mov	r6, r1
 800457a:	d9f4      	bls.n	8004566 <_printf_i+0x116>
 800457c:	2b08      	cmp	r3, #8
 800457e:	d10b      	bne.n	8004598 <_printf_i+0x148>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	07de      	lsls	r6, r3, #31
 8004584:	d508      	bpl.n	8004598 <_printf_i+0x148>
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	6861      	ldr	r1, [r4, #4]
 800458a:	4299      	cmp	r1, r3
 800458c:	bfde      	ittt	le
 800458e:	2330      	movle	r3, #48	; 0x30
 8004590:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004594:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004598:	1b52      	subs	r2, r2, r5
 800459a:	6122      	str	r2, [r4, #16]
 800459c:	f8cd a000 	str.w	sl, [sp]
 80045a0:	464b      	mov	r3, r9
 80045a2:	aa03      	add	r2, sp, #12
 80045a4:	4621      	mov	r1, r4
 80045a6:	4640      	mov	r0, r8
 80045a8:	f7ff fee4 	bl	8004374 <_printf_common>
 80045ac:	3001      	adds	r0, #1
 80045ae:	d14a      	bne.n	8004646 <_printf_i+0x1f6>
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	b004      	add	sp, #16
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f043 0320 	orr.w	r3, r3, #32
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	4833      	ldr	r0, [pc, #204]	; (8004690 <_printf_i+0x240>)
 80045c4:	2778      	movs	r7, #120	; 0x78
 80045c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	6829      	ldr	r1, [r5, #0]
 80045ce:	061f      	lsls	r7, r3, #24
 80045d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80045d4:	d402      	bmi.n	80045dc <_printf_i+0x18c>
 80045d6:	065f      	lsls	r7, r3, #25
 80045d8:	bf48      	it	mi
 80045da:	b2b6      	uxthmi	r6, r6
 80045dc:	07df      	lsls	r7, r3, #31
 80045de:	bf48      	it	mi
 80045e0:	f043 0320 	orrmi.w	r3, r3, #32
 80045e4:	6029      	str	r1, [r5, #0]
 80045e6:	bf48      	it	mi
 80045e8:	6023      	strmi	r3, [r4, #0]
 80045ea:	b91e      	cbnz	r6, 80045f4 <_printf_i+0x1a4>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f023 0320 	bic.w	r3, r3, #32
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	2310      	movs	r3, #16
 80045f6:	e7a7      	b.n	8004548 <_printf_i+0xf8>
 80045f8:	4824      	ldr	r0, [pc, #144]	; (800468c <_printf_i+0x23c>)
 80045fa:	e7e4      	b.n	80045c6 <_printf_i+0x176>
 80045fc:	4615      	mov	r5, r2
 80045fe:	e7bd      	b.n	800457c <_printf_i+0x12c>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	6826      	ldr	r6, [r4, #0]
 8004604:	6961      	ldr	r1, [r4, #20]
 8004606:	1d18      	adds	r0, r3, #4
 8004608:	6028      	str	r0, [r5, #0]
 800460a:	0635      	lsls	r5, r6, #24
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	d501      	bpl.n	8004614 <_printf_i+0x1c4>
 8004610:	6019      	str	r1, [r3, #0]
 8004612:	e002      	b.n	800461a <_printf_i+0x1ca>
 8004614:	0670      	lsls	r0, r6, #25
 8004616:	d5fb      	bpl.n	8004610 <_printf_i+0x1c0>
 8004618:	8019      	strh	r1, [r3, #0]
 800461a:	2300      	movs	r3, #0
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	4615      	mov	r5, r2
 8004620:	e7bc      	b.n	800459c <_printf_i+0x14c>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	1d1a      	adds	r2, r3, #4
 8004626:	602a      	str	r2, [r5, #0]
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	6862      	ldr	r2, [r4, #4]
 800462c:	2100      	movs	r1, #0
 800462e:	4628      	mov	r0, r5
 8004630:	f7fb fe0e 	bl	8000250 <memchr>
 8004634:	b108      	cbz	r0, 800463a <_printf_i+0x1ea>
 8004636:	1b40      	subs	r0, r0, r5
 8004638:	6060      	str	r0, [r4, #4]
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	2300      	movs	r3, #0
 8004640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004644:	e7aa      	b.n	800459c <_printf_i+0x14c>
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	462a      	mov	r2, r5
 800464a:	4649      	mov	r1, r9
 800464c:	4640      	mov	r0, r8
 800464e:	47d0      	blx	sl
 8004650:	3001      	adds	r0, #1
 8004652:	d0ad      	beq.n	80045b0 <_printf_i+0x160>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	079b      	lsls	r3, r3, #30
 8004658:	d413      	bmi.n	8004682 <_printf_i+0x232>
 800465a:	68e0      	ldr	r0, [r4, #12]
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	4298      	cmp	r0, r3
 8004660:	bfb8      	it	lt
 8004662:	4618      	movlt	r0, r3
 8004664:	e7a6      	b.n	80045b4 <_printf_i+0x164>
 8004666:	2301      	movs	r3, #1
 8004668:	4632      	mov	r2, r6
 800466a:	4649      	mov	r1, r9
 800466c:	4640      	mov	r0, r8
 800466e:	47d0      	blx	sl
 8004670:	3001      	adds	r0, #1
 8004672:	d09d      	beq.n	80045b0 <_printf_i+0x160>
 8004674:	3501      	adds	r5, #1
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	9903      	ldr	r1, [sp, #12]
 800467a:	1a5b      	subs	r3, r3, r1
 800467c:	42ab      	cmp	r3, r5
 800467e:	dcf2      	bgt.n	8004666 <_printf_i+0x216>
 8004680:	e7eb      	b.n	800465a <_printf_i+0x20a>
 8004682:	2500      	movs	r5, #0
 8004684:	f104 0619 	add.w	r6, r4, #25
 8004688:	e7f5      	b.n	8004676 <_printf_i+0x226>
 800468a:	bf00      	nop
 800468c:	080047dd 	.word	0x080047dd
 8004690:	080047ee 	.word	0x080047ee

08004694 <memmove>:
 8004694:	4288      	cmp	r0, r1
 8004696:	b510      	push	{r4, lr}
 8004698:	eb01 0402 	add.w	r4, r1, r2
 800469c:	d902      	bls.n	80046a4 <memmove+0x10>
 800469e:	4284      	cmp	r4, r0
 80046a0:	4623      	mov	r3, r4
 80046a2:	d807      	bhi.n	80046b4 <memmove+0x20>
 80046a4:	1e43      	subs	r3, r0, #1
 80046a6:	42a1      	cmp	r1, r4
 80046a8:	d008      	beq.n	80046bc <memmove+0x28>
 80046aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046b2:	e7f8      	b.n	80046a6 <memmove+0x12>
 80046b4:	4402      	add	r2, r0
 80046b6:	4601      	mov	r1, r0
 80046b8:	428a      	cmp	r2, r1
 80046ba:	d100      	bne.n	80046be <memmove+0x2a>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046c6:	e7f7      	b.n	80046b8 <memmove+0x24>

080046c8 <_sbrk_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d06      	ldr	r5, [pc, #24]	; (80046e4 <_sbrk_r+0x1c>)
 80046cc:	2300      	movs	r3, #0
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fc fae8 	bl	8000ca8 <_sbrk>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_sbrk_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_sbrk_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	200002d8 	.word	0x200002d8

080046e8 <memcpy>:
 80046e8:	440a      	add	r2, r1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f0:	d100      	bne.n	80046f4 <memcpy+0xc>
 80046f2:	4770      	bx	lr
 80046f4:	b510      	push	{r4, lr}
 80046f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fe:	4291      	cmp	r1, r2
 8004700:	d1f9      	bne.n	80046f6 <memcpy+0xe>
 8004702:	bd10      	pop	{r4, pc}

08004704 <_realloc_r>:
 8004704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004708:	4680      	mov	r8, r0
 800470a:	4614      	mov	r4, r2
 800470c:	460e      	mov	r6, r1
 800470e:	b921      	cbnz	r1, 800471a <_realloc_r+0x16>
 8004710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004714:	4611      	mov	r1, r2
 8004716:	f7ff bc49 	b.w	8003fac <_malloc_r>
 800471a:	b92a      	cbnz	r2, 8004728 <_realloc_r+0x24>
 800471c:	f7ff fbda 	bl	8003ed4 <_free_r>
 8004720:	4625      	mov	r5, r4
 8004722:	4628      	mov	r0, r5
 8004724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004728:	f000 f81b 	bl	8004762 <_malloc_usable_size_r>
 800472c:	4284      	cmp	r4, r0
 800472e:	4607      	mov	r7, r0
 8004730:	d802      	bhi.n	8004738 <_realloc_r+0x34>
 8004732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004736:	d812      	bhi.n	800475e <_realloc_r+0x5a>
 8004738:	4621      	mov	r1, r4
 800473a:	4640      	mov	r0, r8
 800473c:	f7ff fc36 	bl	8003fac <_malloc_r>
 8004740:	4605      	mov	r5, r0
 8004742:	2800      	cmp	r0, #0
 8004744:	d0ed      	beq.n	8004722 <_realloc_r+0x1e>
 8004746:	42bc      	cmp	r4, r7
 8004748:	4622      	mov	r2, r4
 800474a:	4631      	mov	r1, r6
 800474c:	bf28      	it	cs
 800474e:	463a      	movcs	r2, r7
 8004750:	f7ff ffca 	bl	80046e8 <memcpy>
 8004754:	4631      	mov	r1, r6
 8004756:	4640      	mov	r0, r8
 8004758:	f7ff fbbc 	bl	8003ed4 <_free_r>
 800475c:	e7e1      	b.n	8004722 <_realloc_r+0x1e>
 800475e:	4635      	mov	r5, r6
 8004760:	e7df      	b.n	8004722 <_realloc_r+0x1e>

08004762 <_malloc_usable_size_r>:
 8004762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004766:	1f18      	subs	r0, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	bfbc      	itt	lt
 800476c:	580b      	ldrlt	r3, [r1, r0]
 800476e:	18c0      	addlt	r0, r0, r3
 8004770:	4770      	bx	lr
	...

08004774 <_init>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

08004780 <_fini>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr
